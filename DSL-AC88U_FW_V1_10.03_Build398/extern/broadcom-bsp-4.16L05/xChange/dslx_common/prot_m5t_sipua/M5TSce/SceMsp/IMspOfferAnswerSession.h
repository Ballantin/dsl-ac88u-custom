//==============================================================================
//==============================================================================
//
//              Copyright(c) 2007 Media5 Corporation ("Media5")
//
//  NOTICE:
//   This document contains information that is confidential and proprietary to
//   Media5.
//
//   Media5 reserves all rights to this document as well as to the Intellectual
//   Property of the document and the technology and know-how that it includes
//   and represents.
//
//   This publication cannot be reproduced, neither in whole nor in part, in any
//   form whatsoever without prior written approval by Media5.
//
//   Media5 reserves the right to revise this publication and make changes at
//   any time and without the obligation to notify any person and/or entity of
//   such revisions and/or changes.
//
//==============================================================================
//==============================================================================
#ifndef MXG_IMSPOFFERANSWERSESSION_H
//M5T_INTERNAL_USE_BEGIN
#define MXG_IMSPOFFERANSWERSESSION_H

//==============================================================================
//====  INCLUDES + FORWARD DECLARATIONS  =======================================
//==============================================================================


//-- M5T Global definitions
//---------------------------
#ifndef MXG_MXCONFIG_H
#include "Config/MxConfig.h"
#endif


#ifndef MXG_IECOMUNKNOWN_H
#include "ECom/IEComUnknown.h"
#endif


MX_NAMESPACE_START(MXD_GNS)


//-- Forward Declarations
//-------------------------
class IMspOfferAnswerSessionMgr;
class CSipHeader;
class CBlob;

//==============================================================================
//====  CONSTANTS + DEFINES  ===================================================
//==============================================================================
MX_DECLARE_ECOM_IID(IMspOfferAnswerSession);

//==============================================================================
//====  NEW TYPE DEFINITIONS  ==================================================
//==============================================================================

//==============================================================================
//== Class: IMspOfferAnswerSession
//========================================
//
// Description:
//
//  The MSP Offer Answer Session represents a session of one or more media
//  streams. An object implementing this interface is responsible for all SDP
//  offer/answer exchanges associated with a single session. More specifically,
//  the object is responsible to generate the SDP to send and to interpret the
//  SDP received.
//
//  The manager associated with this object through SetMspOfferAnswerSessionManager
//  is responsible for the actual transport (send and receive) of the SDP
//  information. The manager's responsibility is to determine the best way to send
//  the SDP generated by MSP Offer Answer Session. The manager also has the
//  responsibility to relay the SDP it receives to the MSP Offer Answer Session.
//
//  The class implementing this interface must make sure it keeps a coherent
//  state with regards to the offer/answer mechanism. It must generate only an
//  offer at a time, and any SDP it generates after the reception of an offer
//  will be treated as an answer.
//
//  The manager of the MSP Offer Answer Session is responsible to extract all
//  SDP information from the signaling and to relay it to the MSP. This includes
//  possibly decrypting the SDP packet, verifying its signature and
//  distinguishing the session SDP from the early-session SDP.
//
//  The manager is responsible to verify that it can somehow, by itself or with
//  the help of the MSP, manage the payloads it receives. If it cannot, it must
//  then send a 415 respons with a list of acceptable payload types in a SIP
//  Accept header.
//
//  The MSP Offer Answer Session implementation is responsible to accept or
//  reject offers, based on any aspect of the offer. An offer is rejected by
//  reporting EvNegotiationFailure to the manager, which will send an error
//  response corresponding to the failure reason if possible. The possibility to
//  send a SIP error depends on the current state of the offer/answer
//  negotiation (eg: Receiving an offer in a 200 OK response to an offerless
//  INVITE makes it impossible to reject the offer with a 488).
//
// Location:
//   SceMsp/IMspOfferAnswerSession.h
//
// See Also:
//   IMspOfferAnswerSessionMgr
//
//==============================================================================
class IMspOfferAnswerSession : public IEComUnknown
{
//-- Friend Declarations
//------------------------


//-- Published Interface
//------------------------
public:

    MX_DECLARE_ECOM_GETIID(IMspOfferAnswerSession);

    // Description:
    //  How the UA behaves to establish this session, either originating or
    //  terminating a call.
    //----------------------------------------------------------------------
    enum EUserAgentMode
    {
        // Description:
        //  The UA is using the MSP to originate a call, or in other terms, to
        //  send an initial INVITE request to establish a session.
        //---------------------------------------------------------------------
        eMODE_ORIGINATING,

        // Description:
        //  The UA is using the MSP to terminate a call, or in other terms, to
        //  receive and handle an incoming INVITE request.
        //---------------------------------------------------------------------
        eMODE_TERMINATING
    };


    // Description:
    //  The type of SDP packet received.
    //-----------------------------------
    enum ESdpType
    {

        // Description:
        //  The SDP packet is an offer that was received within a type of
        //  transaction that prevents lengthy operations to generate the
        //  answer. If it is not possible for the MSP Offer Answer Session to
        //  provide an answer within a very short time frame, it reports an
        //  error to the manager through
        //  IMspOfferAnswerSessionMgr::EvNegotiationFailure(eREQUIRE_LONG_TRANSACTION).
        //------------------------------------------------------------------------------
        eOFFER_SHORT,

        // Description:
        //  The SDP packet is an offer that was received within a type of
        //  transaction that prevents lengthy operations to generate the
        //  answer, however the MSP Offer Answer Session cannot report an error
        //  to this offer and must generate an answer. The MSP Offer Answer
        //  Session will generate a valid SDP answer if the SDP is valid,
        //  however it is possible that all media streams are rejected if the
        //  MSP requires more time to create a full answer or if no supported
        //  media stream/media formats are found in the offer. If the SDP offer
        //  is syntactically invalid, the MSP Offer Answer Session will generate
        //  the best SDP it can under such condition. Under such error
        //  conditions, the MSP will possibly try to send a new offer as soon
        //  as it can to renegotiate based on an offer generated locally.
        //----------------------------------------------------------------------
        eOFFER_SHORT_CANT_FAIL,

        // Description:
        //  The SDP packet is an offer that was received within a type of
        //  transaction that allows lengthy operations to generate an answer.
        //  The MSP Offer Answer Session may also report an error through
        //  IMspOfferAnswerSessionMgr::EvNegotiationFailure if a problem
        //  occurs.
        //--------------------------------------------------------------------
        eOFFER_LONG,

        // Description:
        //  The SDP packet is an answer that was received in an unreliable 1xx
        //  response, which means it is somewhat a preview of the final answer
        //  to come in the next reliable response.
        //---------------------------------------------------------------------
        eANSWER_PREVIEW,

        // Description:
        //  The SDP packet is a final answer.
        //------------------------------------
        eANSWER_FINAL

    };

    //==========================================================================
    //==
    //==  SetMspOfferAnswerSessionManager
    //==
    //==========================================================================
    //
    //  Summary:
    //      Configures the manager to which offer/answer events are reported.
    //
    //  Parameters:
    //      pMgr:
    //       Pointer to the manager. It MUST NOT be NULL.
    //
    //  Description:
    //      Configures the manager to which offer/answer events are reported.
    //
    //  See Also:
    //      IMspOfferAnswerSessionMgr
    //
    //==========================================================================
    virtual void SetMspOfferAnswerSessionManager(IN IMspOfferAnswerSessionMgr* pMgr) = 0;


    //==========================================================================
    //==
    //==  SetUserAgentMode
    //==
    //==========================================================================
    //
    //  Summary:
    //      Configures the behavior of the MSP Offer Answer Session for its
    //      initial offer.
    //
    //  Parameters:
    //      eMode:
    //       Configures whether the MSP Offer Answer Session is used to
    //       originate or terminate a call.
    //
    //  Description:
    //      Provides information to the MSP regarding the specific scenario into
    //      which it is used for the initial offer.
    //
    //      If the mode is set to eMODE_ORIGINATING, the MSP may elect to create
    //      no offer in response to the first call to PrepareOffer. This would
    //      mean the the MSP will expect an offer afterwards from the peer.
    //
    //      If the mode is set to eMODE_TERMINATING, it is not possible for the
    //      MSP to create no offer in response to PrepareOffer.
    //
    //      The user agent mode must be configured only once and it must be
    //      before the first call to PrepareOffer.
    //
    //  See Also:
    //      PrepareOffer
    //
    //==========================================================================
    virtual void SetUserAgentMode(IN EUserAgentMode eMode) = 0;


    //==========================================================================
    //==
    //==  GetSipCapabilities
    //==
    //==========================================================================
    //
    //  Summary:
    //      Gets the capabilities supported by the MSP Offer Answer Session.
    //
    //  Parameters:
    //      ruSupported:
    //       Reference to a bit map of "Supported" option tags. The MSP Offer
    //       Answer Session fills this bitmap with the values of supported
    //       extensions.
    //
    //      ruRequire:
    //       Reference to a bit map of "Require" option tags. The MSP Offer
    //       Answer Session fills this bitmap with the values of extensions
    //       that are required in order for the offer/answer mechanism to work
    //       successfully.
    //
    //  Description:
    //      This method gives access to the capabilities of the MSP that are
    //      negotiated at the signaling level instead of just within SDP.
    //
    //      The MSP user calls this method to know which options to place in the
    //      Supported and Require SIP headers.
    //
    //  See Also:
    //      RFC 3261, SetPeerSipCapabilities
    //
    //==========================================================================
    virtual void GetSipCapabilities(INOUT uint32_t& ruSupported,
                                    INOUT uint32_t& ruRequire) = 0;


    //==========================================================================
    //==
    //==  SetPeerSipCapabilities
    //==
    //==========================================================================
    //
    //  Summary:
    //      Configures the capabilities supported by the peer.
    //
    //  Parameters:
    //      uSupported:
    //       A bitmap of "Supported" SIP header. The MSP Offer Answer Session
    //       uses this bitmap to know which extensions it can optionally enable
    //       and disable.
    //
    //      uRequire:
    //       A bitmap of "Require" SIP header. The MSP Offer Answer Session
    //       uses this bitmap to know which extensions it MUST enable.
    //
    //  Description:
    //      Informs the MSP Offer Answer Session of the options that the peer
    //      support and require.
    //
    //      It is the responsibility of the manager to check for options
    //      required by the peer that are not supported locally. This means
    //      checking that options found in a Require header within a message
    //      from the peer must be validated against the options supported by the
    //      MSP Offer Answer Session.
    //
    //  See Also:
    //      GetSipCapabilities
    //
    //==========================================================================
    virtual void SetPeerSipCapabilities(IN const uint32_t uSupported,
                                        IN const uint32_t uRequire) = 0;


    //==========================================================================
    //==
    //==  PrepareOffer
    //==
    //==========================================================================
    //
    //  Summary:
    //      Asynchronously prepares an SDP offer.
    //
    //  Parameters:
    //      bIsMediaSessionRefresh:
    //       Whether or not the offer is required due to a session timer.
    //
    //  Description:
    //      Prepares an SDP offer. The resulting offer may be created
    //      synchronously or asynchronously by the MSP and is reported to its
    //      manager through IMspOfferAnswerSessionMgr::EvNewSdpToSend once it is
    //      ready.
    //
    //  See Also:
    //      CancelOffer
    //
    //==========================================================================
    virtual void PrepareOffer(IN bool bIsMediaSessionRefresh = false) = 0;


    //==========================================================================
    //==
    //==  CancelOffer
    //==
    //==========================================================================
    //
    //  Summary:
    //      Cancels the current offer/answer exchange when the offer was
    //      generated by the MSP Offer Answer Session.
    //
    //  Description:
    //      This method allows to cancel the current offer/answer exchange. The
    //      current offer/answer exchange can only be canceled after the MSP
    //      has generated an offer as a result of PrepareOffer.
    //
    //      After calling this, the MSP Offer Answer Session will revert back to
    //      the state it had before the offer was generated.
    //
    //      This method applies to all the offers that were generated but for
    //      which no answer has been received yet.
    //
    //  See Also:
    //      PrepareOffer
    //
    //==========================================================================
    virtual void CancelOffer() = 0;


    //==========================================================================
    //==
    //==  GlareError
    //==
    //==========================================================================
    //
    //  Summary:
    //      Informs the MSP Offer Answer Session that a network glare error
    //      occurred.
    //
    //  Parameters:
    //      uRetryAfterMs:
    //       The number of milliseconds after which the MSP Offer Answer Session
    //       may try to re-send the offer.
    //
    //  Description:
    //      Informs the MSP that a network glare error occurred. This method can
    //      be called after the MSP has spontaneously decided it needed to send
    //      an updated offer (ie: Not in result of a call to PrepareOffer).
    //
    //      Note that the MSP may choose to not re-send the offer if in the
    //      meantime an offer was received from the peer which allowed to update
    //      the session in the answer according to the original offer's purpose.
    //
    //      The MSP will revert its state back to what it was before the offer
    //      was generated.
    //
    //  See Also:
    //      PrepareOffer
    //
    //==========================================================================
    virtual void GlareError(IN uint32_t uRetryAfterMs) = 0;


    //==========================================================================
    //==
    //==  HandleSdp
    //==
    //==========================================================================
    //
    //  Summary:
    //      Informs the MSP Offer Answer Session of the reception of new SDP
    //      packet.
    //
    //  Parameters:
    //      pSdpSession:
    //       The received SDP packet with Content-Disposition of session. This
    //       is the SDP used for the session once it is established.
    //
    //       Note that there is no null character (i.e. '\0') at the end of the
    //       blob. To add one, the blob has to be copied and then the null
    //       character added to the copy.
    //
    //       The pointed value can only be considered as valid for the time
    //       HandleSdp is processed.
    //
    //       Can be NULL if pSdpEarlySession is not NULL.
    //
    //      pSdpEarlySession:
    //       The received SDP packet with Content-Disposition of early-session.
    //       This is the SDP used for early sessions, before the session is
    //       actually established.
    //
    //       Note that there is no null character (i.e. '\0') at the end of the
    //       blob. To add one, the blob has to be copied and then the null
    //       character added to the copy.
    //
    //       The pointed value can only be considered as valid for the time
    //       HandleSdp is processed.
    //
    //       Can be NULL if pSdpSession is not NULL.
    //
    //      eSessionType:
    //       Describes what type of SDP is being provided in the pSdpSession
    //       parameter. This parameter is ignored if pSdpSession is NULL.
    //
    //      eEarlySessionType:
    //       Describes what type of SDP is being provided in the
    //       pSdpEarlySession parameter. This parameter is ignored if
    //       pSdpEarlySession is NULL.
    //
    //  Description:
    //      This method informs the MSP Offer Answer Session that SDP
    //      information was received.
    //
    //      The caller is responsible to separate the early-session SDP from the
    //      session one. This is trivial using the Content-Disposition header.
    //
    //      The caller is responsible to provide the type of SDP included in the
    //      pSdpSession and pSdpEarlySession parameters.
    //
    //      Either pSdpSession or pSdpEarlySession must be valid for this method
    //      to work. Both can be valid if the received SIP message body
    //      contained both type of SDP.
    //
    //      If both pSdpSession and pSdpEarlySession are valid and are offers,
    //      the answer to both MUST be provided through a single EvNewSdpToSend
    //      call.
    //
    //      If the one of the SDP is an offer and the other is NULL and the
    //      implementation wants to send a offer for the NULL parameter, the
    //      answer AND the new offer MUST be provided through a single
    //      EvNewSdpToSend call.
    //
    //==========================================================================
    virtual void HandleSdp(IN const CBlob* pSdpSession,
                           IN const CBlob* pSdpEarlySession,
                           IN ESdpType eSessionType,
                           IN ESdpType eEarlySessionType) = 0;


    //==========================================================================
    //==
    //==  RemoteUserNotified
    //==
    //==========================================================================
    //
    //  Summary:
    //      Informs the MSP Offer Answer Session that the remote user was
    //      notified of an incoming session.
    //
    //  Description:
    //      This method is used by the signaling layer when it sees that the
    //      remote user is being notified of an incoming call. In SIP, this
    //      corresponds to the reception of a 180 ringing response to an initial
    //      INVITE request.
    //
    //      This method might be called once per client INVITE transaction. It
    //      is called each time a 180 is received, for a maximum of one time per
    //      client INVITE transaction.
    //
    //      Note that it is not mandatory for a peer to send a 180 ringing
    //      response before sending a 200 OK response.
    //
    //  See Also:
    //      RemoteUserAccepted
    //
    //==========================================================================
    virtual void RemoteUserNotified() = 0;


    //==========================================================================
    //==
    //==  RemoteUserAccepted
    //==
    //==========================================================================
    //
    //  Summary:
    //      Informs the MSP Offer Answer Session that the remote user has
    //      accepted the session.
    //
    //  Description:
    //      This method informs the MSP Offer Answer Session that the remote
    //      user has accepted the session. In SIP, this corresponds to the
    //      reception of a 200 OK response.
    //
    //  See Also:
    //      RemoteUserNotified
    //
    //==========================================================================
    virtual void RemoteUserAccepted() = 0;


    //==========================================================================
    //==
    //==  LocalUserAccepted
    //==
    //==========================================================================
    //
    //  Summary:
    //      Informs the MSP Offer Answer Session that the local user has
    //      accepted the session.
    //
    //  Description:
    //      This method informs the MSP Offer Answer Session that the local
    //      user has accepted the session. In SIP, this corresponds to the
    //      sending of a 200 OK response.
    //
    //      When this method is called, early-session media should be
    //      terminated. If an early-session offer has been sent, it should be
    //      considered that no answer will come (and no CancelOffer).
    //
    //==========================================================================
    virtual void LocalUserAccepted() = 0;


    //==========================================================================
    //==
    //==  Fork
    //==
    //==========================================================================
    //
    //  Summary:
    //      Forks the current offer answer session to create a new one.
    //
    //  Parameters:
    //      ppForkedOfferAnswerSession:
    //       Newly created offer answer session.
    //
    //  Description:
    //      This method allows to create a new offer answer session following
    //      forking on the signaling side.
    //
    //      The new session is created with the same characteristics as the
    //      original session, that is it supports the same media streams and
    //      same capabilities as for the originally offered session.
    //
    //      The new session can however be created with different attributes,
    //      specifically media direction for devices that are not able to render
    //      simultaneous streams.
    //
    //  #Implementation Notes:#
    //
    //      The MSP Offer Answer Session implementation must make sure it copies
    //      or "starts from" the original offer provided to its manager through
    //      EvNewSdpToSend. This is used only in client scenarios when trying to
    //      establish a session and forking at the SIP level occurs. It will
    //      then receive answers based on this offer, unless it elected to not
    //      generate any offer in the INVITE, in which case it must be ready to
    //      receive an offer.
    //
    //==========================================================================
    virtual void Fork(OUT IMspOfferAnswerSession** ppForkedOfferAnswerSession) = 0;


    //==========================================================================
    //==
    //==  ResetNegotiation
    //==
    //==========================================================================
    //
    //  Summary:
    //      Resets the negotiation to its original state.
    //
    //  Description:
    //      This method can be used in client scenarios, when sending an initial
    //      INVITE requests outside of a dialog. It informs the MSP Offer Answer
    //      Session that the currently negotiated parameters should be reset to
    //      the state of the session after PrepareOffer was called.
    //
    //      This method can be called once the signaling layer knows that the
    //      session will not progress further with the current endpoint but the
    //      signaling continues to try to establish a session.
    //
    //  Example:
    //      Simplified scenario to better present this usecase:
    //      <CODE>
    //          Network     Signaling       MSP
    //             |            |            |
    //             |            |PrepareOffer|
    //             |            |----------->|
    //             |            |            |
    //             |            |EvNewSdpToSend
    //             | INVITE     |<-----------|
    //             |<-----------|            |
    //             |            |            |
    //             | 180 w/ sdp |            |
    //             |----------->|HandleSdp   |
    //             |            |----------->|
    //             | 302        |            |
    //             |----------->|ResetNegotiation
    //             |            |----------->|
    //             | INVITE     |            |
    //             |<-----------|            |
    //             |      \     |            |
    //             |       \|Here the signaling
    //             |        |follows the redirection
    //             |        |and reuses the SDP it
    //             |        |originally has received
    //                      |in EvNewSdpToSend.
    //
    //      </CODE>
    //
    //==========================================================================
    virtual void ResetNegotiation() = 0;


    //==========================================================================
    //==
    //==  PreTerminateSession
    //==
    //==========================================================================
    //
    //  Summary:
    //      Informs the Offer Answer Session that its associated signaling
    //      session is about to be terminated.
    //
    //  Description:
    //      Informs the Offer Answer Session that its associated signaling
    //      session is about to be terminated.
    //
    //      Ongoing offers from the MSP may not receive answers, and the MSP may
    //      stop processing any offer it has received.
    //
    //      This call also offers the MSP the occasion to change its medias
    //      streams in a mode where it stops sending media while it still accept
    //      incoming media, until TerminateSession is called.
    //
    //      It is not mandatory to call PreTerminateSession. It is possible to
    //      call TerminateSession without ever calling PreTerminateSession.
    //
    //  See Also:
    //      TerminateSession
    //
    //==========================================================================
    virtual void PreTerminateSession() = 0;


    //==========================================================================
    //==
    //==  TerminateSession
    //==
    //==========================================================================
    //
    //  Summary:
    //      Terminates the Offer Answer Session.
    //
    //  Description:
    //      This informs the Offer Answer Session that the session was
    //      terminated and all media processing for this session should be
    //      terminated.
    //
    //  See Also:
    //      PreTerminateSession
    //
    //==========================================================================
    virtual void TerminateSession() = 0;


//-- Hidden Methods
//-------------------
protected:
    //-- << Constructors / Destructors / Operators >>
    //-------------------------------------------------

    // Summary:
    //  Default Constructor.
    //-----------------------
    IMspOfferAnswerSession(){}

    // Summary:
    //  Destructor.
    //--------------
    virtual ~IMspOfferAnswerSession(){}

private:
    //-- << Deactivated Constructors / Destructors / Operators >>
    //-------------------------------------------------------------

    // Summary:
    //  Copy Constructor.
    //--------------------
    IMspOfferAnswerSession(IN const IMspOfferAnswerSession& rSrc);

    // Summary:
    //  Assignment Operator.
    //-----------------------
    IMspOfferAnswerSession& operator=(IN const IMspOfferAnswerSession& rSrc);


//-- Hidden Data Members
//------------------------
protected:
private:


};


//==============================================================================
//====  INLINE METHODS  ========================================================
//==============================================================================


MX_NAMESPACE_END(MXD_GNS)

//M5T_INTERNAL_USE_END

#endif //-- #ifndef MXG_IMSPOFFERANSWERSESSION_H
