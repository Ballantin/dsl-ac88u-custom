/*****************************************************************************
*
*  Copyright (c) 2006 Broadcom, All Rights Reserved.
*  Contains proprietary and confidential information.
*
*  No portions of this material may be reproduced in any form without the
*  written permission of:
*
*        Broadcom
*        16215 Alton Parkway
*        P.O. Box 57013
*        Irvine, California 92619-7013
*
*  All information contained in this document is Broadcom
*  company private, proprietary, and trade secret.
*
*****************************************************************************/

/****************************************************************************/
/**
*  @file    pcml.h
*
*  @brief   Lower PCM Highway device driver header file
*
*  This file contains the lower device driver header information for the
*  PCM module.
*/
/****************************************************************************/

#ifndef PCML_H
#define PCML_H


/* ---- Include Files ----------------------------------------------------- */
#include <xdrvTypes.h>

/* ---- Public Constants and Types ---------------------------------------- */

#define PCML_CHAN_NONE        (-1)

/**
*  @brief   PCM operating mode
*
*  The PCM operating mode enumeration is used to specify the operating mode
*  of the specified PCM device:
*     @li TDM master mode - Clock and frame sync are generated by BCM11xx.
*     @li TDM slave mode - Clock and frame sync are generated externally.
*/
typedef enum
{
   PCML_MODE_TDM_MASTER,         /**< TDM master */
   PCML_MODE_TDM_SLAVE           /**< TDM slave */
}
PCML_MODE;


typedef struct
{
   int (*ChanCountGetFP)( int devNum );

   int (*ChanDisableFP)( int devNum, int chan );
   int (*ChanEnableFP)( int devNum, int chan );
   int (*ChanIsEnabledFP)( int devNum, int chan );

   int (*ClkFreqGetFP)( int devNum );
   int (*ClkFreqSetFP)( int devNum, int freq );

   int (*ClkInvertDisableFP)( int devNum );
   int (*ClkInvertEnableFP)( int devNum );
   int (*ClkInvertIsEnabledFP)( int devNum );

   int (*DevNumValidFP)( int devNum );

   int (*ExternalClkDisableFP)( int devNum );
   int (*ExternalClkEnableFP)( int devNum );
   int (*ExternalClkIsEnabledFP)( int devNum );

   int (*FsFallingDisableFP)( int devNum );
   int (*FsFallingEnableFP)( int devNum );
   int (*FsFallingIsEnabledFP)( int devNum );

   int (*FsInvertDisableFP)( int devNum );
   int (*FsInvertEnableFP)( int devNum );
   int (*FsInvertIsEnabledFP)( int devNum );

   int (*FsLongDisableFP)( int devNum );
   int (*FsLongEnableFP)( int devNum );
   int (*FsLongIsEnabledFP)( int devNum );

   int (*FsOffsetGetFP)( int devNum );
   int (*FsOffsetSetFP)( int devNum, int offset );

   int (*HwyDisableFP)( int devNum );
   int (*HwyEnableFP)( int devNum );
   int (*HwyIsEnabledFP)( int devNum );
   int (*HwyResetFP)( int devNum );

   int (*LoopbackDisableFP)( int devNum );
   int (*LoopbackEnableFP)( int devNum );
   int (*LoopbackIsEnabledFP)( int devNum );

   int (*LsbFirstDisableFP)( int devNum );
   int (*LsbFirstEnableFP)( int devNum );
   int (*LsbFirstIsEnabledFP)( int devNum );

   PCML_MODE   (*ModeGetFP)( int devNum );
   PCML_MODE   (*ModeSetFP)( int devNum, PCML_MODE mode );

   int (*SampleFreqGetFP)( int devNum );
   int (*SampleFreqSetFP)( int devNum, int freq );
   int (*SampleSizeGetFP)( int devNum );
   int (*SampleSizeSetFP)( int devNum, int size );

   int (*TimeslotAllocGetFP)( int devNum, int slot );
   int (*TimeslotAllocSetFP)( int devNum, int slot, int chan );
}
PCML_FUNCS;

typedef struct
{
   /* This must be the first structure member. */
   const PCML_FUNCS *pFuncs;

}
PCML_DRV;

#define pcmlChanCountGet( pDrv, devNum )           ( pDrv->pFuncs->ChanCountGetFP( devNum ) )

#define pcmlChanDisable( pDrv, devNum, chan )      ( pDrv->pFuncs->ChanDisableFP( devNum, chan ) )
#define pcmlChanEnable( pDrv, devNum, chan )       ( pDrv->pFuncs->ChanEnableFP( devNum, chan ) )
#define pcmlChanIsEnabled( pDrv, devNum, chan )    ( pDrv->pFuncs->ChanIsEnabledFP( devNum, chan ) )

#define pcmlClkFreqGet( pDrv, devNum )             ( pDrv->pFuncs->ClkFreqGetFP( devNum ) )
#define pcmlClkFreqSet( pDrv, devNum, freq )       ( pDrv->pFuncs->ClkFreqSetFP( devNum, freq ) )

#define pcmlClkInvertDisable( pDrv, devNum )       ( pDrv->pFuncs->ClkInvertDisableFP( devNum ) )
#define pcmlClkInvertEnable( pDrv, devNum )        ( pDrv->pFuncs->ClkInvertEnableFP( devNum ) )
#define pcmlClkInvertIsEnabled( pDrv, devNum )     ( pDrv->pFuncs->ClkInvertIsEnabledFP( devNum ) )

#define pcmlDevNumValid( pDrv, devNum )            ( pDrv->pFuncs->DevNumValidFP( devNum ) )

#define pcmlExternalClkDisable( pDrv, devNum )     ( pDrv->pFuncs->ExternalClkDisableFP( devNum ) )
#define pcmlExternalClkEnable( pDrv, devNum )      ( pDrv->pFuncs->ExternalClkEnableFP( devNum ) )
#define pcmlExternalClkIsEnabled( pDrv, devNum )   ( pDrv->pFuncs->ExternalClkIsEnabledFP( devNum ) )

#define pcmlFsFallingDisable( pDrv, devNum )       ( pDrv->pFuncs->FsFallingDisableFP( devNum ) )
#define pcmlFsFallingEnable( pDrv, devNum )        ( pDrv->pFuncs->FsFallingEnableFP( devNum ) )
#define pcmlFsFallingIsEnabled( pDrv, devNum )     ( pDrv->pFuncs->FsFallingIsEnabledFP( devNum ) )

#define pcmlFsInvertDisable( pDrv, devNum )        ( pDrv->pFuncs->FsInvertDisableFP( devNum ) )
#define pcmlFsInvertEnable( pDrv, devNum )         ( pDrv->pFuncs->FsInvertEnableFP( devNum ) )
#define pcmlFsInvertIsEnabled( pDrv, devNum )      ( pDrv->pFuncs->FsInvertIsEnabledFP( devNum ) )

#define pcmlFsLongDisable( pDrv, devNum )          ( pDrv->pFuncs->FsLongDisableFP( devNum ) )
#define pcmlFsLongEnable( pDrv, devNum )           ( pDrv->pFuncs->FsLongEnableFP( devNum ) )
#define pcmlFsLongIsEnabled( pDrv, devNum )        ( pDrv->pFuncs->FsLongIsEnabledFP( devNum ) )

#define pcmlFsOffsetGet( pDrv, devNum )            ( pDrv->pFuncs->FsOffsetGetFP( devNum ) )
#define pcmlFsOffsetSet( pDrv, devNum, offset )    ( pDrv->pFuncs->FsOffsetSetFP( devNum, offset ) )

#define pcmlHwyDisable( pDrv, devNum )             ( pDrv->pFuncs->HwyDisableFP( devNum ) )
#define pcmlHwyEnable( pDrv, devNum )              ( pDrv->pFuncs->HwyEnableFP( devNum ) )
#define pcmlHwyIsEnabled( pDrv, devNum )           ( pDrv->pFuncs->HwyIsEnabledFP( devNum ) )
#define pcmlHwyReset( pDrv, devNum )               ( pDrv->pFuncs->HwyResetFP( devNum ) )

#define pcmlLoopbackDisable( pDrv, devNum )        ( pDrv->pFuncs->LoopbackDisableFP( devNum ) )
#define pcmlLoopbackEnable( pDrv, devNum )         ( pDrv->pFuncs->LoopbackEnableFP( devNum ) )
#define pcmlLoopbackIsEnabled( pDrv, devNum )      ( pDrv->pFuncs->LoopbackIsEnabledFP( devNum ) )

#define pcmlLsbFirstDisable( pDrv, devNum )        ( pDrv->pFuncs->LsbFirstDisableFP( devNum ) )
#define pcmlLsbFirstEnable( pDrv, devNum )         ( pDrv->pFuncs->LsbFirstEnableFP( devNum ) )
#define pcmlLsbFirstIsEnabled( pDrv, devNum )      ( pDrv->pFuncs->LsbFirstIsEnabledFP( devNum ) )

#define pcmlModeGet( pDrv, devNum )                ( pDrv->pFuncs->ModeGetFP( devNum ) )
#define pcmlModeSet( pDrv, devNum, mode )          ( pDrv->pFuncs->ModeSetFP( devNum, mode ) )

#define pcmlSampleFreqGet( pDrv, devNum )          ( pDrv->pFuncs->SampleFreqGetFP( devNum ) )
#define pcmlSampleFreqSet( pDrv, devNum, freq )    ( pDrv->pFuncs->SampleFreqSetFP( devNum, freq ) )
#define pcmlSampleSizeGet( pDrv, devNum )          ( pDrv->pFuncs->SampleSizeGetFP( devNum ) )
#define pcmlSampleSizeSet( pDrv, devNum, size )    ( pDrv->pFuncs->SampleSizeSetFP( devNum, size ) )

#define pcmlTimeslotAllocGet( pDrv, devNum, slot )       ( pDrv->pFuncs->TimeslotAllocGetFP( devNum, slot ) )
#define pcmlTimeslotAllocSet( pDrv, devNum, slot, chan ) ( pDrv->pFuncs->TimeslotAllocSetFP( devNum, slot, chan ) )

#ifdef __cplusplus
extern "C"
{
#endif

/* ---- Public Variables -------------------------------------------------- */


/* ---- Public Function Prototypes ---------------------------------------- */



#ifdef __cplusplus
}
#endif

#endif
