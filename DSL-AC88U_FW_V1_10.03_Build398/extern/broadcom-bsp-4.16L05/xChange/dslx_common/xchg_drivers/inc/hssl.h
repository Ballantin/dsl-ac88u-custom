/*****************************************************************************
*
*  Copyright (c) 2004 Broadcom, All Rights Reserved.
*  Contains proprietary and confidential information.
*
*  No portions of this material may be reproduced in any form without the
*  written permission of:
*
*        Broadcom
*        16215 Alton Parkway
*        P.O. Box 57013
*        Irvine, California 92619-7013
*
*  All information contained in this document is Broadcom
*  company private, proprietary, and trade secret.
*
*****************************************************************************/

/****************************************************************************/
/**
*  @file    hssl.h
*
*  @brief   Lower HSS (High Speed Serial) device driver header file
*
*  This file contains the lower device driver header information for the
*  HSS module.
*/
/****************************************************************************/

#ifndef HSSL_H
#define HSSL_H


/* ---- Include Files ----------------------------------------------------- */
#include <xdrvTypes.h>

/* ---- Public Constants and Types ---------------------------------------- */

/**
*  @brief   HSS operating mode
*
*  The HSS operating mode enumeration is used to specify the operating mode
*  of the specified HSS channel:
*     @li Supplementary mode 1 - Clock is generated by BCM110x (frame sync is
*                                not used).
*     @li Supplementary mode 2 - Clock and frame sync are generated by 
*                                BCM110x.
*     @li TDM master mode - Clock and frame sync are generated by BCM110x.
*     @li TDM slave mode - Clock and frame sync are generated externally.
*/
typedef enum
{
   HSSL_MODE_SUPP1 = 0,          /**< Supplementary mode 1 */
   HSSL_MODE_SUPP2,              /**< Supplementary mode 2 */
   HSSL_MODE_TDM_MASTER,         /**< TDM master */
   HSSL_MODE_TDM_SLAVE,          /**< TDM slave */
} HSSL_MODE;


typedef struct
{
   int (*hsslChValidFp)( int ch );
   int (*hsslClkGetFp)( int ch );
   int (*hsslClkSetFp)( int ch, int freq );
   int (*hsslClkInvertDisableFp)( int ch );
   int (*hsslClkInvertEnableFp)( int ch );
   int (*hsslClkInvertIsEnabledFp)( int ch );
   int (*hsslDisableFp)( int ch );
   int (*hsslDmaDisableFp)( int ch );
   int (*hsslDmaEnableFp)( int ch );
   int (*hsslDmaIsEnabledFp)( int ch );
   int (*hsslEnableFp)( int ch );
   int (*hsslExt8192KhzDisableFp)( int ch );
   int (*hsslExt8192KhzEnableFp)( int ch );
   int (*hsslExt8192KhzIsEnabledFp)( int ch );
   int (*hsslFsFallingDisableFp)( int ch );
   int (*hsslFsFallingEnableFp)( int ch );
   int (*hsslFsFallingIsEnabledFp)( int ch );
   int (*hsslFsInvertDisableFp)( int ch );
   int (*hsslFsInvertEnableFp)( int ch );
   int (*hsslFsInvertIsEnabledFp)( int ch );
   int (*hsslFsLongDisableFp)( int ch );
   int (*hsslFsLongEnableFp)( int ch );
   int (*hsslFsLongIsEnabledFp)( int ch );
   int (*hsslFsOffsetGetFp)( int ch );
   int (*hsslFsOffsetSetFp)( int ch, int offset );
   int (*hsslLoopbackDisableFp)( int ch );
   int (*hsslLoopbackEnableFp)( int ch );
   int (*hsslLoopbackIsEnabledFp)( int ch );
   int (*hsslLsbFirstDisableFp)( int ch );
   int (*hsslLsbFirstEnableFp)( int ch );
   int (*hsslLsbFirstIsEnabledFp)( int ch );
   int (*hsslIrqRxEnableFp)( int ch );
   int (*hsslIrqTxEnableFp)( int ch );
   int (*hsslIsEnabledFp)( int ch );
   int (*hsslIsrRxFp)( int ch );
   int (*hsslIsrTxFp)( int ch );
   HSSL_MODE   (*hsslModeGetFp)( int ch );
   HSSL_MODE   (*hsslModeSetFp)( int ch, HSSL_MODE mode );
   int (*hsslPacketLenGetFp)( int ch );
   int (*hsslPacketLenSetFp)( int ch, int len );
   int (*hsslReadFp)( int ch, char *bufp, int len );
   int (*hsslResetFp)( int ch );
   int (*hsslSampleFreqGetFp)( int ch );
   int (*hsslSampleFreqSetFp)( int ch, int freq );
   int (*hsslSampleSizeGetFp)( int ch );
   int (*hsslSampleSizeSetFp)( int ch, int size );
   int (*hsslTimeslotGetFp)( int ch );
   int (*hsslTimeslotSetFp)( int ch, int slot );
   int (*hsslTimeslotNumGetFp)( int ch );
   int (*hsslTimeslotNumSetFp)( int ch, int slots );
   int (*hsslWriteFp)( int ch, char *bufp, int len );
} HSSL_FUNCS;

#define hsslChValid( pDrv, ch )                 ( pDrv->pDrvFuncs->hsslChValidFp( ch ) )
#define hsslClkGet( pDrv, ch )                  ( pDrv->pDrvFuncs->hsslClkGetFp( ch ) )
#define hsslClkSet( pDrv, ch, freq )            ( pDrv->pDrvFuncs->hsslClkSetFp( ch, freq ) )
#define hsslClkInvertDisable( pDrv, ch )        ( pDrv->pDrvFuncs->hsslClkInvertDisableFp( ch ) )
#define hsslClkInvertEnable( pDrv, ch )         ( pDrv->pDrvFuncs->hsslClkInvertEnableFp( ch ) )
#define hsslClkInvertIsEnabled( pDrv, ch )      ( pDrv->pDrvFuncs->hsslClkInvertIsEnabledFp( ch ) )
#define hsslDisable( pDrv, ch )                 ( pDrv->pDrvFuncs->hsslDisableFp( ch ) )
#define hsslDmaDisable( pDrv, ch )              ( pDrv->pDrvFuncs->hsslDmaDisableFp( ch ) )
#define hsslDmaEnable( pDrv, ch )               ( pDrv->pDrvFuncs->hsslDmaEnableFp( ch ) )
#define hsslDmaIsEnabled( pDrv, ch )            ( pDrv->pDrvFuncs->hsslDmaIsEnabledFp( ch ) )
#define hsslEnable( pDrv, ch )                  ( pDrv->pDrvFuncs->hsslEnableFp( ch ) )
#define hsslExt8192KhzDisable( pDrv, ch )       ( pDrv->pDrvFuncs->hsslExt8192KhzDisableFp( ch ) )
#define hsslExt8192KhzEnable( pDrv, ch )        ( pDrv->pDrvFuncs->hsslExt8192KhzEnableFp( ch ) )
#define hsslExt8192KhzIsEnabled( pDrv, ch )     ( pDrv->pDrvFuncs->hsslExt8192KhzIsEnabledFp( ch ) )
#define hsslFsFallingDisable( pDrv, ch )        ( pDrv->pDrvFuncs->hsslFsFallingDisableFp( ch ) )
#define hsslFsFallingEnable( pDrv, ch )         ( pDrv->pDrvFuncs->hsslFsFallingEnableFp( ch ) )
#define hsslFsFallingIsEnabled( pDrv, ch )      ( pDrv->pDrvFuncs->hsslFsFallingIsEnabledFp( ch ) )
#define hsslFsInvertDisable( pDrv, ch )         ( pDrv->pDrvFuncs->hsslFsInvertDisableFp( ch ) )
#define hsslFsInvertEnable( pDrv, ch )          ( pDrv->pDrvFuncs->hsslFsInvertEnableFp( ch ) )
#define hsslFsInvertIsEnabled( pDrv, ch )       ( pDrv->pDrvFuncs->hsslFsInvertIsEnabledFp( ch ) )
#define hsslFsLongDisable( pDrv, ch )           ( pDrv->pDrvFuncs->hsslFsLongDisableFp( ch ) )
#define hsslFsLongEnable( pDrv, ch )            ( pDrv->pDrvFuncs->hsslFsLongEnableFp( ch ) )
#define hsslFsLongIsEnabled( pDrv, ch )         ( pDrv->pDrvFuncs->hsslFsLongIsEnabledFp( ch ) )
#define hsslFsOffsetGet( pDrv, ch )             ( pDrv->pDrvFuncs->hsslFsOffsetGetFp( ch ) )
#define hsslFsOffsetSet( pDrv, ch, offset )     ( pDrv->pDrvFuncs->hsslFsOffsetSetFp( ch, offset ) )
#define hsslLoopbackDisable( pDrv, ch )         ( pDrv->pDrvFuncs->hsslLoopbackDisableFp( ch ) )
#define hsslLoopbackEnable( pDrv, ch )          ( pDrv->pDrvFuncs->hsslLoopbackEnableFp( ch ) )
#define hsslLoopbackIsEnabled( pDrv, ch )       ( pDrv->pDrvFuncs->hsslLoopbackIsEnabledFp( ch ) )
#define hsslLsbFirstDisable( pDrv, ch )         ( pDrv->pDrvFuncs->hsslLsbFirstDisableFp( ch ) )
#define hsslLsbFirstEnable( pDrv, ch )          ( pDrv->pDrvFuncs->hsslLsbFirstEnableFp( ch ) )
#define hsslLsbFirstIsEnabled( pDrv, ch )       ( pDrv->pDrvFuncs->hsslLsbFirstIsEnabledFp( ch ) )
#define hsslIrqRxEnable( pDrv, ch )             ( pDrv->pDrvFuncs->hsslIrqRxEnableFp( ch ) )
#define hsslIrqTxEnable( pDrv, ch )             ( pDrv->pDrvFuncs->hsslIrqTxEnableFp( ch ) )
#define hsslIsEnabled( pDrv, ch )               ( pDrv->pDrvFuncs->hsslIsEnabledFp( ch ) )
#define hsslIsrRx( pDrv, ch )                   ( pDrv->pDrvFuncs->hsslIsrRxFp( ch ) )
#define hsslIsrTx( pDrv, ch )                   ( pDrv->pDrvFuncs->hsslIsrTxFp( ch ) )
#define hsslModeGet( pDrv, ch )                 ( pDrv->pDrvFuncs->hsslModeGetFp( ch ) )
#define hsslModeSet( pDrv, ch, mode )           ( pDrv->pDrvFuncs->hsslModeSetFp( ch, mode ) )
#define hsslPacketLenGet( pDrv, ch )            ( pDrv->pDrvFuncs->hsslPacketLenGetFp( ch ) )
#define hsslPacketLenSet( pDrv, ch, len )       ( pDrv->pDrvFuncs->hsslPacketLenSetFp( ch, len ) )
#define hsslRead( pDrv, ch, bufp, len )         ( pDrv->pDrvFuncs->hsslReadFp( ch, bufp, len ) )
#define hsslReset( pDrv, ch )                   ( pDrv->pDrvFuncs->hsslResetFp( ch ) )
#define hsslSampleFreqGet( pDrv, ch )           ( pDrv->pDrvFuncs->hsslSampleFreqGetFp( ch ) )
#define hsslSampleFreqSet( pDrv, ch, freq )     ( pDrv->pDrvFuncs->hsslSampleFreqSetFp( ch, freq ) )
#define hsslSampleSizeGet( pDrv, ch )           ( pDrv->pDrvFuncs->hsslSampleSizeGetFp( ch ) )
#define hsslSampleSizeSet( pDrv, ch, size )     ( pDrv->pDrvFuncs->hsslSampleSizeSetFp( ch, size ) )
#define hsslTimeslotGet( pDrv, ch )             ( pDrv->pDrvFuncs->hsslTimeslotGetFp( ch ) )
#define hsslTimeslotSet( pDrv, ch, slot )       ( pDrv->pDrvFuncs->hsslTimeslotSetFp( ch, slot ) )
#define hsslTimeslotNumGet( pDrv, ch )          ( pDrv->pDrvFuncs->hsslTimeslotNumGetFp( ch ) )
#define hsslTimeslotNumSet( pDrv, ch, slots )   ( pDrv->pDrvFuncs->hsslTimeslotNumSetFp( ch, slots ) )
#define hsslWrite( pDrv, ch, bufp, len )        ( pDrv->pDrvFuncs->hsslWriteFp( ch, bufp, len ) )

typedef struct
{
   /* This must be the first structure member. */
   const HSSL_FUNCS *pDrvFuncs;

} HSSL_DRV;
                  
#ifdef __cplusplus
extern "C"
{
#endif

/* ---- Public Variables -------------------------------------------------- */


/* ---- Public Function Prototypes ---------------------------------------- */



#ifdef __cplusplus
}
#endif

#endif
