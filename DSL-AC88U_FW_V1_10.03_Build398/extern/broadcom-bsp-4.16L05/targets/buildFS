#!/bin/bash

source $KERNEL_DIR/.config

TOP_DIR=`pwd`

if [ "$MOD_DIR" == "" ] ; then
    MOD_DIR=$PROFILE/modules
fi

if [ "$FSSRC_DIR" == "" ]; then
    FSSRC_DIR=./fs.src
fi

if [ "$INSTALL_DIR" == "" ]; then
    INSTALL_DIR=./$PROFILE/fs.install
fi

ROOTFS=$PROFILE/fs

# Create file system dir
if [ -L $ROOTFS ]; then
  rm -rf $ROOTFS/*
else
  rm -rf $ROOTFS
  mkdir $ROOTFS
fi
chmod 777 $ROOTFS
# Copy files onto root file system
echo "Creating target root file system..."
cp -av $FSSRC_DIR/* $ROOTFS
find $ROOTFS -name ".svn" -exec rm -rf '{}' \;

# convert Snn*.symlink and Knn*.symlink files to real symlinks
flist=`ls ${ROOTFS}/etc/rc3.d/S*.symlink ${ROOTFS}/etc/rc3.d/K*.symlink 2> /dev/null`
for f in $flist
do
	f=$(basename $f)
	numbase=${f%.*}
	namebase=`echo $numbase | cut -c 4-`
	(cd ${ROOTFS}/etc/rc3.d; rm -f ${numbase}.symlink; ln -s ../init.d/${namebase}.sh ${numbase})
done

rsync -av --exclude="/lib/public" --exclude="/lib/private" --exclude="/lib/gpl"  $INSTALL_DIR/* $ROOTFS

EXECSTACK=`which execstack`
if [ "x$EXECSTACK" == "x" ]; then 
	EXECSTACK=$HOSTTOOLS_DIR/prelink/src/execstack
fi

if [ "$BUILD_DISABLE_EXEC_STACK" == "y" ]; then
	#clear execute bit on binaries
	find $INSTALL_DIR -type f -perm /u=x,g=x,o=x -print |xargs -L1 $EXECSTACK -c 2> /dev/null
fi

cp -av $INSTALL_DIR/lib/public/* $ROOTFS/lib
cp -av $INSTALL_DIR/lib/private/* $ROOTFS/lib
cp -av $INSTALL_DIR/lib/gpl/* $ROOTFS/lib

# check for custom inittab file
if [ -f $ROOTFS/etc/inittab.custom ] ; then
	echo -e "Using custom /etc/inittab file"
	rm -f $ROOTFS/etc/inittab
	mv $ROOTFS/etc/inittab.custom $ROOTFS/etc/inittab
fi

# Create directories as needed
mkdir $ROOTFS/dev
mkdir $ROOTFS/mnt
mkdir $ROOTFS/sys
mkdir $ROOTFS/proc
mkdir $ROOTFS/var
mkdir $ROOTFS/etc/adsl
mkdir $ROOTFS/data
cp -av $BRCMDRIVERS_DIR/broadcom/char/adsl/bcm9$BRCM_CHIP/*.bin  $ROOTFS/etc/adsl

# debugfs
if [ "$BUILD_DEBUG_TOOLS" == "y" ] ; then
    chmod +w $ROOTFS/etc/fstab
    echo -e "debugfs\t/sys/kernel/debug\tdebugfs\tnofail\t0\t0\n" >> $ROOTFS/etc/fstab
    chmod -w $ROOTFS/etc/fstab
    rm -rf $ROOTFS/sys/kernel/debug
    mkdir -p $ROOTFS/sys/kernel/debug
    rm -f $ROOTFS/debug
    ln -s sys/kernel/debug $ROOTFS/debug
fi

# Update kernel directory based on kernel:
sed -i "s|^KERNELVER=_set_by_buildFS_$|KERNELVER=$LINUX_VER_STR|" $ROOTFS/etc/init.d/*.sh;


if [ "$BRCM_KERNEL_OPROFILE" == "y" ] ; then
   mkdir -p $ROOTFS/dev/oprofile
fi


# this tells busybox to set the core rlimit to unlimited, thus allowing
# apps to dump their core when they crash
if [ "$CONFIG_ELF_CORE" == "y" ]; then
   touch $ROOTFS/.init_enable_core
fi

# copy our top level PROFILE file, image version and boardparms to filesystem for debugging
if [ "$BUILD_DEBUG_TOOLS" == "y" ]; then
    echo "Include a copy of PROFILE file in system image"
    rm -f $ROOTFS/etc/$PROFILE
    cp $PROFILE_DIR/$PROFILE $ROOTFS/etc
    echo $IMAGE_VERSION > $ROOTFS/etc/image_version
    egrep -v '^\s*#include' ${SHARED_DIR}/opensource/boardparms/bcm963xx/boardparms.c | $CPP -D CONFIG_BCM9${BRCM_CHIP} | egrep -v '^# ' > $ROOTFS/etc/boardparms
fi


DEFAULTCFG=`echo $BRCM_DEFAULTCFG | tr -d '"'`

if [ ! -z $DEFAULTCFG ]; then
    if [[ $DEFAULTCFG != /* ]]; then
        DEFAULTCFG=$DEFAULTCFG_DIR/$DEFAULTCFG
    fi
   
   if [ -f "$DEFAULTCFG" ]; then
       echo "Using $DEFAULTCFG as default config"
       mkdir -p $ROOTFS/etc
       cp -v $DEFAULTCFG $ROOTFS/etc/default.cfg && chmod 444 $ROOTFS/etc/default.cfg || exit 1
   else
       echo
       echo "        No default run-time config file called $DEFAULTCFG"
       echo "        Check your profile setting!"
       echo
       exit 1
   fi
fi

#
# The logic to test BRCM_CERT_FILE must be different than the logic to test
# BRCM_DEFAULTCFG (above) because BRCM_CERT_FILE can have 3 possible values:
# 1. If user does not select TR69_BCM_SSL, then BRCM_CERT_FILE=
# 2. If user selects TR69_BCM_SSL, but does not specify a cert file, then BRCM_CERT_FILE=""
# 3. If user selects TR69_BMC_SSL, and specifies a cert file, then BRCM_CERT_FILE="somefilename"
#
# The elif line tests for case 1 first, so that if BRCM_CERT_FILE is blank,
# the first condition will be false and the second condition [ $BRCM_CERT_FILE != '""' ]
# will not be tested.  That second condition will cause bash to complain if BRCM_CERT_FILE is blank.
#
DEFAULT_CERT_FILE=`echo $DEFAULTCFG_DIR/$BRCM_CERT_FILE|sed -e 's/\"//g'`

if [ -f "$DEFAULT_CERT_FILE" ]; then
   cp -v $DEFAULT_CERT_FILE $ROOTFS/etc/acscert.cacert; chmod a+r $ROOTFS/etc/acscert.cacert
elif [ "X$BRCM_CERT_FILE" != "X" ] && [ $BRCM_CERT_FILE != '""' ]; then
   echo
   echo "        No certificate file called $BRCM_CERT_FILE in $DEFAULTCFG_DIR"
   echo "        Check your profile setting!"
   exit 1
else
   echo
fi

# Create symbolic links
mkdir $ROOTFS/dev/misc
ln -s /var/fuse $ROOTFS/dev/misc/fuse
ln -s /var/fuse $ROOTFS/dev/fuse
ln -s /var/mtab $ROOTFS/etc/mtab
ln -s /var/log/log $ROOTFS/dev/log
ln -s /var/sysmsg $ROOTFS/etc/sysmsg
ln -s /var/passwd $ROOTFS/etc/passwd
ln -s /var/group $ROOTFS/etc/group
ln -s /var/ppp/pppmsg $ROOTFS/etc/pppmsg
ln -s /var/fyi/sys/dns $ROOTFS/etc/resolv.conf
ln -s /var/fyi/sys/gateway $ROOTFS/etc/gateway.conf
ln -s /var/udhcpd/udhcpd.conf $ROOTFS/etc/udhcpd.conf
ln -s /var/udhcpd/udhcpd.leases $ROOTFS/etc/udhcpd.leases
ln -s /var/dms.conf $ROOTFS/etc/dms.conf
ln -s /var/ipsec/ipsec.conf $ROOTFS/etc/ipsec.conf
ln -s /var/ipsec/racoon.conf $ROOTFS/etc/racoon.conf
ln -s /var/ipsec/psk.txt $ROOTFS/etc/psk.txt
ln -s /var/iproute2/rt_tables $ROOTFS/etc/iproute2/rt_tables
ln -s /var/tmp $ROOTFS/tmp
ln -s /var/samba $ROOTFS/etc/samba
ln -s /data $ROOTFS/usr/local/data

if [ -x $PROFILE/special-buildFS ]; then
   $PROFILE/special-buildFS
fi

# Copy proprietary binaries if any
FSBIN=`ls $TOP_DIR/fs.bin|wc -l`
if [ $FSBIN != 0 ]; then
   echo "Copying proprietary binaries..."
   cd $TOP_DIR
   cp -avf fs.bin/* $ROOTFS
fi

# Copy 3rdParty supplied .ko onto dummy .ko
if [ "$BRCM_DRIVER_ISDN" == "m" ] ; then
   echo "Copying 3rdParty kernel objects (.ko) ..."
   eval "find $TOP_DIR/$ROOTFS/../modules/lib/modules/. -name '*isdn.ko' | xargs cp -f $BRCMDRIVERS_DIR/broadcom/char/isdn/bcm9$BRCM_CHIP/3rdParty/*isdn.ko_3rdParty "
fi

#Copying gpon tools
if [ "$BRCM_DRIVER_GPON" != "" ] ; then
   if [ "$CONFIG_BCM_GPON_IMPL" == "2" ]; then
     TGT_DIR=$ROOTFS/etc
   else
     TGT_DIR=$ROOTFS/opt
   fi

   echo "Copying gpon tools to $TGT_DIR"
   if [ "$BRCM_GPON_FPGA" == "y" ]; then
     cp -avrf $BRCMDRIVERS_DIR/broadcom/char/gpon/impl$CONFIG_BCM_GPON_IMPL/fs/fpga/gpon/* $TGT_DIR
   else
     cp -avrf $BRCMDRIVERS_DIR/broadcom/char/gpon/impl$CONFIG_BCM_GPON_IMPL/fs/6816/gpon/* $TGT_DIR
	  rm -rf $TGT_DIR/scripts/rsmibclr*
     if [ "$BRCM_CHIP" != "6816" ]; then
       cp -avrf $BRCMDRIVERS_DIR/broadcom/char/gpon/impl$CONFIG_BCM_GPON_IMPL/fs/6816/gpon/scripts/rsmibclr_6818 $TGT_DIR/scripts/rsmibclr
     else
       cp -avrf $BRCMDRIVERS_DIR/broadcom/char/gpon/impl$CONFIG_BCM_GPON_IMPL/fs/6816/gpon/scripts/rsmibclr $TGT_DIR/scripts/
     fi
   fi
fi

#Copying i2c scripts to /opt/scripts
if [ "$BRCM_DRIVER_I2C" != "" ] ; then
   echo "Copying i2c scripts to /opt/"
   cp -avrf $BRCMDRIVERS_DIR/broadcom/char/i2c/chips/impl1/fs/* $ROOTFS/opt
fi

if [ -d $ROOTFS/opt/modules ]; then
   pushd $ROOTFS/opt/modules && for f in *.ko.save; do mv "$f" "${f%.ko.save}.ko"; done
   popd
fi

cd $MOD_DIR
cp -a lib $TOP_DIR/$ROOTFS/.

if [ "$STRIP" != "/bin/touch" ]; then
# Stripping unneeded module symbols only when strip is "enabled"
echo "Stripping kernel modules..."
find $TOP_DIR/$ROOTFS/lib/modules -name "*.ko"
   if [ "$CONFIG_KALLSYMS" == "y" ]; then
      #if KALLSYMS is enabled only strip debug symbols from all modules, this helps
      #to retain symbols of static functions 
      eval "find $TOP_DIR/$ROOTFS/lib/modules -name '*.ko' |xargs $STRIP --strip-debug"
   else
      #Modules that need parameters cannot be stripped
      eval "find $TOP_DIR/$ROOTFS/lib/modules -name '*.ko' ! -name 'ip*.ko' |xargs $STRIP --strip-unneeded"
      # However do strip debug symbols, in case debug symbols are included
      eval "find $TOP_DIR/$ROOTFS/lib/modules -name 'ip*.ko' |xargs $STRIP --strip-debug"
   fi
fi

if [ -f $TOP_DIR/$PROFILE/filesystem.tgz ]
then
  echo "consumer build -- not dynamically generating bcm-base-drivers.sh"
else
  cat $TOP_DIR/$ROOTFS/etc/init.d/bcm-base-drivers.head > $TOP_DIR/$ROOTFS/etc/init.d/bcm-base-drivers.sh
  cat $TOP_DIR/$ROOTFS/etc/init.d/bcm-base-drivers.list | ( while read a b
  do
     if echo $a | egrep -q '^\s*(#.*)?$'
     then
        echo "$a $b" >> $TOP_DIR/$ROOTFS/etc/init.d/bcm-base-drivers.sh
     else
       if test -e  $TOP_DIR/$ROOTFS/lib/modules/$LINUX_VER_STR/$a
       then
         echo "insmod /lib/modules/$LINUX_VER_STR/$a $b" >> $TOP_DIR/$ROOTFS/etc/init.d/bcm-base-drivers.sh
       fi
     fi
  done
  )
  cat $TOP_DIR/$ROOTFS/etc/init.d/bcm-base-drivers.tail >> $TOP_DIR/$ROOTFS/etc/init.d/bcm-base-drivers.sh
  chmod +x $TOP_DIR/$ROOTFS/etc/init.d/bcm-base-drivers.sh
  rm  -f $TOP_DIR/$ROOTFS/etc/init.d/bcm-base-drivers.tail  
  rm -f $TOP_DIR/$ROOTFS/etc/init.d/bcm-base-drivers.head  
  rm -f $TOP_DIR/$ROOTFS/etc/init.d/bcm-base-drivers.list
fi

#delete unwanted module
echo "deleting intermediate wl modules"
MODULE_CLEAN_UP="wldrv.ko wl_tmp_partial.ko wlpartial.ko"
#remove unnecessary wlan driver
if [ "${WLBUS}"  != "" ]; then
    if [ `expr index $WLBUS pci` == 0 ]; then
           MODULE_CLEAN_UP=${MODULE_CLEAN_UP}" wl.ko"
    fi
    if [ `expr index $WLBUS usb` == 0 ]; then
           MODULE_CLEAN_UP=${MODULE_CLEAN_UP}" wl-usb.ko"
    fi
else
   MODULE_CLEAN_UP=${MODULE_CLEAN_UP}" wl-usb.ko"
fi
for f in $MODULE_CLEAN_UP; do \
   eval "find $TOP_DIR/$ROOTFS/lib/modules -name $f |xargs rm -f";\
done
eval "find $TOP_DIR/$ROOTFS/lib/modules -name wlobj-*.ko | xargs rm -f"

# strip userspace binaries is sstrip is "enabled"
# sstrip is set to /bin/touch if BUILD_GDBSERVER=y
if [ "$SSTRIP" != "/bin/touch" ]; then
    # Even though libcreduction did some stripping, we can make the
    # libraries even smaller by doing sstrip here.  Also libcreduction
    # does not process all libs, e.g. libmdm.so
    echo "Stripping userspace binaries..."
    if [ "$BUILD_DISABLE_EXEC_STACK" == "y" ]; then
        #clear execute bit on binaries
        find $TOP_DIR/$ROOTFS -type f -perm /u=x,g=x,o=x -print |xargs -L1 $EXECSTACK -c 2> /dev/null
    fi
    $SSTRIP $TOP_DIR/$ROOTFS/bin/* $TOP_DIR/$ROOTFS/lib/*.so* $TOP_DIR/$ROOTFS/lib/*/*.so*
fi

# If a consumer release has created a filesystem tarball, fill in
# any missing proprietary binaries using that tarball
( cd $TOP_DIR/$ROOTFS ; tar xzkf ../filesystem.tgz 2>/dev/null ; true )

