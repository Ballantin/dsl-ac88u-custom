--- a/pppd/chap.c	2011-10-26 18:06:42.000000000 +0800
+++ b/pppd/chap.c	2014-12-01 16:04:12.000000000 +0800
@@ -422,6 +422,7 @@
 	return;
     }
 
+    system("arc_syslogc dial \"CHAP: Received challenge request.\"");
     GETCHAR(rchallenge_len, inp);
     len -= sizeof (u_char) + rchallenge_len;	/* now name field length */
     if (len < 0) {
@@ -630,7 +631,7 @@
 	PRINTMSG(inp, len);
 
     cstate->clientstate = CHAPCS_OPEN;
-
+    system("arc_syslogc dial \"CHAP: Auth success.\"");
     auth_withpeer_success(cstate->unit, PPP_CHAP);
 }
 
@@ -660,7 +661,7 @@
 	PRINTMSG(inp, len);
 
     error("CHAP authentication failed");
-
+    system("arc_syslogc dial \"CHAP: Auth fail.\"");
     //log_to_file("CHAP_AUTH_FAIL");
     system("/etc/ppp/ppp_event CHAP_AUTH_FAIL");
 
@@ -695,7 +696,11 @@
     INCPTR(chal_len, outp);
 
     BCOPY(cstate->chal_name, outp, name_len);	/* append hostname */
-
+    {
+	char cmdbuf[256];
+	sprintf(cmdbuf, "arc_syslogc dial \"CHAP: Sending challenge with username %s.\"", cstate->chal_name);
+	system(cmdbuf);
+    }
     output(cstate->unit, outpacket_buf, outlen + PPP_HDRLEN);
   
     TIMEOUT(ChapChallengeTimeout, cstate, cstate->timeouttime);
@@ -790,7 +795,11 @@
     INCPTR(md_len, outp);
 
     BCOPY(cstate->resp_name, outp, name_len); /* append our name */
-
+    {
+	char cmdbuf[256];
+	sprintf(cmdbuf, "arc_syslogc dial \"CHAP: Sending response with username %s.\"", cstate->resp_name);
+	system(cmdbuf);
+    }	
     /* send the packet */
     output(cstate->unit, outpacket_buf, outlen + PPP_HDRLEN);
 
--- a/pppd/plugins/pppoe/pppoe_client.c	2011-06-23 17:28:10.000000000 +0800
+++ b/pppd/plugins/pppoe/pppoe_client.c	2014-12-01 16:04:12.000000000 +0800
@@ -40,7 +40,7 @@
     
     if (DEB_DISC2)
 	poe_dbglog (ses,"PADO received: %P", p_in);
-    
+    system("arc_syslogc dial \"PADO received.\"");
     memcpy(&ses->remote, &p_in->addr, sizeof(struct sockaddr_ll));
     memcpy(&ses->curr_pkt.addr, &ses->remote , sizeof(struct sockaddr_ll));
     
@@ -83,7 +83,7 @@
     
     if (DEB_DISC)
 	poe_dbglog (ses,"Sent PADR: %P", *p_out);
-
+    system("arc_syslogc dial \"Sending PADR.\"");
     if (ses->np)
 	return 1;
     
@@ -113,6 +113,7 @@
     //if (DEB_DISC)
     //	poe_dbglog (ses,"Sending PADI");
     fprintf(stderr,"Sending PADI\n");
+    system("arc_syslogc dial \"Sending PADI.\"");
     
     ses->retransmits = 0 ;
     
@@ -152,7 +153,7 @@
     
     if (DEB_DISC)
 	poe_dbglog (ses,"PADS received: %P", p_in);
-    
+    system("arc_syslogc dial \"PADS received.\"");
     ses->sp.sa_family = AF_PPPOX;
     ses->sp.sa_protocol = PX_PROTO_OE;
     ses->sp.sa_addr.pppoe.sid = p_in->hdr->sid;
@@ -163,7 +164,11 @@
 	poe_dbglog (ses,"Got connection: %x %s <--->%E",  
 		ses->sp.sa_addr.pppoe.sid, 
 		ses->sp.sa_addr.pppoe.dev, ses->sp.sa_addr.pppoe.remote);
-    
+    {
+	char cmdbuf[128];
+	sprintf(cmdbuf, "arc_syslogc dial \"Got session id %04x.\"", ses->sp.sa_addr.pppoe.sid);
+	system(cmdbuf);
+    }
     return 1;
 }
 
@@ -171,6 +176,7 @@
 			struct pppoe_packet *p_in,
 			struct pppoe_packet **p_out){
     ses->state = PADO_CODE;
+    system("arc_syslogc dial \"PADT received.\"");
     return 0;
 }
 
--- a/pppd/ipcp.c	2011-06-23 17:28:10.000000000 +0800
+++ b/pppd/ipcp.c	2014-12-01 16:04:12.000000000 +0800
@@ -1723,7 +1723,32 @@
 
     np_up(f->unit, PPP_IP);
     ipcp_is_up = 1;
-
+    {
+	char cmdbuf[256];
+	char *ptr;
+	struct in_addr myip;
+
+	ptr = &cmdbuf[0];
+	myip.s_addr = go->ouraddr;
+	ptr += sprintf(ptr, "arc_syslogc dial \"IPCP: Interface ppp%d Up, IP address %s, ", f->unit, inet_ntoa(myip));
+	myip.s_addr = ho->hisaddr;
+	ptr += sprintf(ptr, "Gateway IP address %s.\"", inet_ntoa(myip));
+	system(cmdbuf);
+	ptr = &cmdbuf[0];
+	ptr += sprintf(ptr, "arc_syslogc dial \"IPCP: ");
+	if (go->dnsaddr[0])
+	{
+		myip.s_addr = go->dnsaddr[0];
+		ptr += sprintf(ptr, "Primary DNS address %s. ", inet_ntoa(myip));
+	}
+	if (go->dnsaddr[1])
+	{
+		myip.s_addr = go->dnsaddr[1];
+		ptr += sprintf(ptr, "Secondary DNS address %s.", inet_ntoa(myip));
+	}
+	ptr += sprintf(ptr, "\"");
+	system(cmdbuf);
+    }
     if (ip_up_hook)
 	ip_up_hook();
 
@@ -1787,7 +1812,11 @@
 	ipcp_clear_addrs(f->unit, ipcp_gotoptions[f->unit].ouraddr,
 			 ipcp_hisoptions[f->unit].hisaddr);
     }
-
+    {
+	char cmdbuf[128];
+	sprintf(cmdbuf, "arc_syslogc dial \"IPCP: Interface ppp%d Down.\"", f->unit);
+	system(cmdbuf);
+    }
     /* Execute the ip-down script */
     if (ipcp_script_state == s_up && ipcp_script_pid == 0) {
 	ipcp_script_state = s_down;

--- a/pppd/lcp.c	2014-12-01 16:05:46.000000000 +0800
+++ b/pppd/lcp.c	2014-12-01 16:08:56.000000000 +0800
@@ -449,7 +449,7 @@
     ppp_recv_config(unit, PPP_MRU, (lax_recv? 0: 0xffffffff),
 		    wo->neg_pcompression, wo->neg_accompression);
     peer_mru[unit] = PPP_MRU;
-
+    system("arc_syslogc dial \"LCP: Starting.\"");
     if (listen_time != 0) {
 	f->flags |= DELAYED_UP;
 	timeout(lcp_delayed_up, f, 0, listen_time * 1000);
@@ -788,6 +788,18 @@
 	/* this should never happen, because peer_mtu should be 1500 */
 	error("Bug in lcp_addci: wrong length");
     }
+
+   {
+	char cmdbuf[256];
+	char *auth;
+
+	if (go->neg_chap)
+		auth = "CHAP";
+	else
+		auth = "PAP";
+	sprintf(cmdbuf, "arc_syslogc dial \"LCP: Sending configuration requst with MRU %d, AUTHTYPE %s.\"", go->mru, auth); 
+	system(cmdbuf);
+   }
 }
 
 
@@ -930,6 +942,18 @@
     ACKCIVOID(CI_SSNHF, go->neg_ssnhf);
     ACKCIENDP(CI_EPDISC, go->neg_endpoint, go->endpoint.class,
 	      go->endpoint.value, go->endpoint.length);
+   {
+	char cmdbuf[256];
+	char *auth;
+
+	if (go->neg_chap)
+		auth = "CHAP";
+	else
+		auth = "PAP";
+	sprintf(cmdbuf, "arc_syslogc dial \"LCP: Sending configuration ack with MRU %d, AUTHTYPE %s.\"", go->mru, auth); 
+	system(cmdbuf);
+   }
+
 
     /*
      * If there are any remaining CIs, then this packet is bad.
@@ -1484,7 +1508,7 @@
     u_char *rejp;		/* Pointer to next char in reject frame */
     u_char *nakp;		/* Pointer to next char in Nak frame */
     int l = *lenp;		/* Length left */
-
+    char cmdbuf[128];
     /*
      * Reset all his options.
      */
@@ -1543,6 +1567,8 @@
 		PUTCHAR(CI_MRU, nakp);
 		PUTCHAR(CILEN_SHORT, nakp);
 		PUTSHORT(MINMRU, nakp);	/* Give him a hint */
+		sprintf(cmdbuf, "arc_syslogc dial \"LCP: received MRU %d too short, rejecting.\"", cishort);
+		system(cmdbuf);
 		break;
 	    }
 #if 1 //Fixed by crazy 20070424: bug id 6439(20070423)
@@ -1556,11 +1582,15 @@
 		PUTCHAR(CILEN_SHORT, nakp);
 		PUTSHORT(REJECT_MAXMRU, nakp);	/* Give him a hint */
 #endif
+		sprintf(cmdbuf, "arc_syslogc dial \"LCP: Received MRU %d too big, rejecting.\"", cishort);
+		system(cmdbuf);
 		break;
 	    }
 #endif
 	    ho->neg_mru = 1;		/* Remember he sent MRU */
 	    ho->mru = cishort;		/* And remember value */
+	    sprintf(cmdbuf, "arc_syslogc dial \"LCP: Received MRU %d.\"", cishort);
+	    system(cmdbuf);
 	    break;
 
 	case CI_ASYNCMAP:
@@ -1612,6 +1642,7 @@
 		if (ho->neg_chap ||	/* we've already accepted CHAP */
 		    cilen != CILEN_SHORT) {
 		    LCPDEBUG(("lcp_reqci: rcvd AUTHTYPE PAP, rejecting..."));
+		    system("arc_syslogc dial \"LCP: Received AUTHTYPE PAP, rejecting.\"");
 		    orc = CONFREJ;
 		    break;
 		}
@@ -1624,12 +1655,14 @@
 		    break;
 		}
 		ho->neg_upap = 1;
+		system("arc_syslogc dial \"LCP: Received AUTHTYPE PAP.\"");
 		break;
 	    }
 	    if (cishort == PPP_CHAP) {
 		if (ho->neg_upap ||	/* we've already accepted PAP */
 		    cilen != CILEN_CHAP) {
 		    LCPDEBUG(("lcp_reqci: rcvd AUTHTYPE CHAP, rejecting..."));
+		    system("arc_syslogc dial \"LCP: Received AUTHTYPE CHAP, rejecting.\"");
 		    orc = CONFREJ;
 		    break;
 		}
@@ -1655,6 +1688,7 @@
 		}
 		ho->chap_mdtype = cichar; /* save md type */
 		ho->neg_chap = 1;
+		system("arc_syslogc dial \"LCP: Received AUTHTYPE CHAP.\"");
 		break;
 	    }
 
@@ -1749,6 +1783,8 @@
 	    /* possibly should insist on a minimum/maximum MRRU here */
 	    ho->neg_mrru = 1;
 	    ho->mrru = cishort;
+	    sprintf(cmdbuf, "arc_syslogc dial \"LCP: Received MRRU %d.\"", cishort);
+	    system(cmdbuf);
 	    break;
 
 	case CI_SSNHF:
@@ -1885,7 +1921,17 @@
 	peer_mru[f->unit] = ho->mru;
 
     lcp_echo_lowerup(f->unit);  /* Enable echo messages */
-
+   {
+	char cmdbuf[256];
+	char *auth;
+
+	if (ho->neg_chap)
+		auth = "CHAP";
+	else
+		auth = "PAP";
+	sprintf(cmdbuf, "arc_syslogc dial \"LCP: Configure with MTU %d, AUTHTYPE %s.\"", mtu, auth); 
+	system(cmdbuf);
+   }
     link_established(f->unit);
 }
 
@@ -1941,6 +1987,7 @@
 #endif
 	/***********************************************/
 	cprintf("LCP: Finish\n");
+	system("arc_syslogc dial \"LCP: Finish.\"");
 	/***********************************************/
 }
 
--- a/pppd/upap.c	2011-10-26 18:07:17.000000000 +0800
+++ b/pppd/upap.c	2014-12-01 16:04:12.000000000 +0800
@@ -456,7 +456,7 @@
     }
 
     u->us_clientstate = UPAPCS_OPEN;
-
+    system("arc_syslogc dial \"PAP: Auth success.\"");
     auth_withpeer_success(u->us_unit, PPP_PAP);
 }
 
@@ -501,7 +501,7 @@
    	
     //log_to_file("PAP_AUTH_FAIL");	// add by honor
     system("/etc/ppp/ppp_event PAP_AUTH_FAIL");
-
+    system("arc_syslogc dial \"PAP: Auth fail.\"");
     auth_withpeer_fail(u->us_unit, PPP_PAP);
 }
 
@@ -536,6 +536,11 @@
     TIMEOUT(upap_timeout, u, u->us_timeouttime);
     ++u->us_transmits;
     u->us_clientstate = UPAPCS_AUTHREQ;
+    {
+	char cmdbuf[256];
+	sprintf(cmdbuf, "arc_syslogc dial \"PAP: Sending challenge with username %s.\"", u->us_user);
+	system(cmdbuf);
+    }
 }


