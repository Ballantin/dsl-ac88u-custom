diff --git a/client/clparse.c b/client/clparse.c
index d6090f1..2058873 100644
--- a/client/clparse.c
+++ b/client/clparse.c
@@ -37,7 +37,7 @@
 
 struct client_config top_level_config;
 
-#define NUM_DEFAULT_REQUESTED_OPTS	9
+#define NUM_DEFAULT_REQUESTED_OPTS	10
 struct option *default_requested_options[NUM_DEFAULT_REQUESTED_OPTS + 1];
 
 static void parse_client_default_duid(struct parse *cfile);
@@ -82,7 +82,11 @@ isc_result_t read_client_conf ()
 				dhcp_universe.code_hash, &code, 0, MDL);
 
 	/* 4 */
-	code = DHO_ROUTERS;
+	/* The Classless Static Routes option code MUST appear in the parameter
+	* request list prior to both the Router option code and the Static
+	* Routes option code, if present. (RFC3442)
+	*/
+	code = DHO_CLASSLESS_STATIC_ROUTES;
 	option_code_hash_lookup(&default_requested_options[3],
 				dhcp_universe.code_hash, &code, 0, MDL);
 
@@ -111,6 +115,11 @@ isc_result_t read_client_conf ()
 	option_code_hash_lookup(&default_requested_options[8],
 				dhcpv6_universe.code_hash, &code, 0, MDL);
 
+	/* 10 */
+	code = DHO_ROUTERS;
+	option_code_hash_lookup(&default_requested_options[9],
+				dhcp_universe.code_hash, &code, 0, MDL);
+
 	for (code = 0 ; code < NUM_DEFAULT_REQUESTED_OPTS ; code++) {
 		if (default_requested_options[code] == NULL)
 			log_fatal("Unable to find option definition for "
diff --git a/client/dhclient.c b/client/dhclient.c
index d91eafc..c37f9ea 100644
--- a/client/dhclient.c
+++ b/client/dhclient.c
@@ -54,6 +54,11 @@
 #include <linux/if_ether.h>
 #endif
 
+#define cprintf_10114_3 cprintf
+
+#define OLD_STATIC_ROUTES	"/tmp/old_static_routes_%s"
+#define NEW_STATIC_ROUTES	"/tmp/new_static_routes_%s"
+
 //Added by Zhijian to assigned IAID when dhcp client v6 running on PPP interface 2014-08-15
 unsigned int ia_id = 0;
 
@@ -1514,6 +1519,55 @@ void dhcpack (packet)
 	bind_lease (client);
 }
 
+/* Zhijian 2015-09-29 to postpone adding routes, we just need to save the new routes. */
+int dhclient_save_routes(client)
+	struct client_state *client;
+{
+	struct option_cache *oc;
+	struct data_string ds;
+	char new_static_routes[1024] = "";
+	int new_route_length = 0;
+	int action = 0;
+	char name_buf[256];
+	
+	cprintf_10114_3("[%s]\n", (client -> state == S_REQUESTING
+			  ? "BOUND"
+			  : (client -> state == S_RENEWING
+			     ? "RENEW"
+			     : (client -> state == S_REBOOTING
+				? "REBOOT" : "REBIND"))));
+
+	if((client -> state == S_REQUESTING) || (client -> state == S_RENEWING))
+	{
+		snprintf(name_buf, sizeof(name_buf), NEW_STATIC_ROUTES, client->interface->name);
+		unlink(name_buf);
+		
+		memset(&ds, 0, sizeof(ds));
+		oc = lookup_option(&dhcp_universe, client->new->options, DHO_CLASSLESS_STATIC_ROUTES);
+		if(oc && evaluate_option_cache(&ds, NULL, NULL, NULL, client->new->options, NULL, &global_scope, oc, MDL)) 
+		{
+			memset(new_static_routes, 0, sizeof(new_static_routes));
+			strcpy(new_static_routes, pretty_print_option(oc->option, ds.data, ds.len, 0, 0));
+			new_route_length = strlen(new_static_routes);
+			cprintf_10114_3("Get new static routes [%d][%s][%s]\n", new_route_length, new_static_routes, client->interface->name);
+
+			buf_to_file(name_buf, new_static_routes, strlen(new_static_routes));
+			action = 1;
+			
+			data_string_forget(&ds, MDL);
+		}
+		else
+		{
+			cprintf_10114_3("No static routes option found. [%s]\n", client->interface->name);
+		}
+
+		cprintf_10114_3("Finished to check static routes.\n");
+	}
+	
+	return action;
+}
+
+
 void bind_lease (client)
 	struct client_state *client;
 {
@@ -1533,6 +1587,12 @@ void bind_lease (client)
 	client -> active = client -> new;
 #endif
 	
+	/* Forrest 2014.02.09, Modified for [JIRA] (10114-3) [VRV9510KWAC23-B-23]. */
+	//dhclient_routes_updates(client);
+	/* Zhijian 2015-09-29 to postpone adding routes. */
+	dhclient_save_routes(client);
+	/* Forrest 2014.02.09, End. */
+	
 	/* Run the client script with the new parameters. */
 	script_init (client, (client -> state == S_REQUESTING
 			  ? "BOUND"
@@ -1553,6 +1613,9 @@ void bind_lease (client)
 
 	if(gratuitous_arp(client))
 	{
+		/* Forrest 2014.02.09, Modified for [JIRA] (10114-3) [VRV9510KWAC23-B-23]. */
+		set_ipv4_addr(client->interface->name, NULL, NULL, 0);
+		/* Forrest 2014.02.09, End. */
 		make_decline (client, client -> new);
 		send_decline (client);
 		destroy_client_lease (client -> new);
diff --git a/common/inet.c b/common/inet.c
index 78552eb..6b4cf47 100644
--- a/common/inet.c
+++ b/common/inet.c
@@ -544,6 +544,59 @@ free_iaddrcidrnetlist(struct iaddrcidrnetlist **result) {
 	return ISC_R_SUCCESS;
 }
 
+static const char *
+inet_ntopdd(const unsigned char *src, unsigned srclen, char *dst, size_t size)
+{
+	char tmp[sizeof("32.255.255.255.255")];
+	int len;
+
+	switch (srclen) {
+		case 2:
+			len = sprintf (tmp, "%u.%u", src[0], src[1]);
+			break;
+		case 3:
+			len = sprintf (tmp, "%u.%u.%u", src[0], src[1], src[2]);
+			break;
+		case 4:
+			len = sprintf (tmp, "%u.%u.%u.%u", src[0], src[1], src[2], src[3]);
+			break;
+		case 5:
+			len = sprintf (tmp, "%u.%u.%u.%u.%u", src[0], src[1], src[2], src[3], src[4]);
+			break;
+		default:
+			return NULL;
+	}
+	if (len < 0)
+		return NULL;
+
+	if (len > size) {
+		errno = ENOSPC;
+		return NULL;
+	}
+
+	return strcpy (dst, tmp);
+}
+/* pdestdesc() turns an iaddr structure into a printable dest. descriptor */
+const char *
+pdestdesc(const struct iaddr addr) {
+	static char pbuf[sizeof("255.255.255.255.255")];
+
+	if (addr.len == 0) {
+		return "<null destination descriptor>";
+	}
+	if (addr.len == 1) {
+		return "0";
+	}
+	if ((addr.len >= 2) && (addr.len <= 5)) {
+		return inet_ntopdd(addr.iabuf, addr.len, pbuf, sizeof(pbuf));
+	}
+
+	log_fatal("pdestdesc():%s:%d: Invalid destination descriptor length %d.",
+		  MDL, addr.len);
+	/* quell compiler warnings */
+	return NULL;
+}
+
 /* piaddr() turns an iaddr structure into a printable address. */
 /* XXX: should use a const pointer rather than passing the structure */
 const char *
diff --git a/common/memory.c b/common/memory.c
index e45929f..8ad6e37 100644
--- a/common/memory.c
+++ b/common/memory.c
@@ -152,3 +152,49 @@ int clone_group (struct group **gp, struct group *group,
 	group_dereference (&g, file, line);
 	return 1;
 }
+
+int file_to_buf(const char *path, char *buf, int len)
+{
+	FILE *fp;
+	size_t rlen;
+
+	if(path == NULL || buf == NULL || len == 0)
+	{
+		return 0;
+	}
+	memset(buf, 0 , len);
+
+	if ((fp = fopen(path, "r")))
+	{
+		rlen = fread(buf, 1, len - 1, fp);
+		if(rlen < 0)
+		{
+			rlen = 0;
+		}
+		buf[rlen] = '\0';
+		fclose(fp);
+		return 1;
+	}
+
+	return 0;
+}
+
+void buf_to_file(const char *path, const char *buf, int len)
+{
+        FILE *fp;
+
+	if(path == NULL || buf == NULL || len == 0)
+	{
+		return;
+	}
+	if(len < 0)
+	{
+		len = strlen(buf);
+	}
+        if ((fp = fopen(path, "w")))
+	{
+		fwrite(buf, 1, len, fp);	
+                fclose(fp);
+        }
+}
+
diff --git a/common/options.c b/common/options.c
index 5db9e3e..e6b4f79 100644
--- a/common/options.c
+++ b/common/options.c
@@ -911,7 +911,15 @@ cons_options(struct packet *inpacket, struct dhcp_packet *outpacket,
 		 * packet.
 		 */
 		priority_list[priority_len++] = DHO_SUBNET_MASK;
-		priority_list[priority_len++] = DHO_ROUTERS;
+		if (op = lookup_option(&dhcp_universe, cfg_options,
+								DHO_CLASSLESS_STATIC_ROUTES))
+		{
+			priority_list[priority_len++] = DHO_CLASSLESS_STATIC_ROUTES;
+		}
+		else
+		{
+			priority_list[priority_len++] = DHO_ROUTERS;
+		}
 		priority_list[priority_len++] = DHO_DOMAIN_NAME_SERVERS;
 		priority_list[priority_len++] = DHO_HOST_NAME;
 		priority_list[priority_len++] = DHO_FQDN;
@@ -1954,6 +1962,7 @@ const char *pretty_print_option (option, data, len, emit_commas, emit_quotes)
 	const unsigned char *dp = data;
 	char comma;
 	unsigned long tval;
+	unsigned int octets = 0;
 
 	if (emit_commas)
 		comma = ',';
@@ -1962,6 +1971,7 @@ const char *pretty_print_option (option, data, len, emit_commas, emit_quotes)
 
 	memset (enumbuf, 0, sizeof enumbuf);
 
+	if (option->format[0] != 'R') { /* see explanation lower */
 	/* Figure out the size of the data. */
 	for (l = i = 0; option -> format [i]; i++, l++) {
 		if (l >= sizeof(fmtbuf) - 1)
@@ -2111,6 +2121,33 @@ const char *pretty_print_option (option, data, len, emit_commas, emit_quotes)
 	if (numhunk < 0)
 		numhunk = 1;
 
+	} else { /* option->format[i] == 'R') */
+		/* R (destination descriptor) has variable length.
+		 * We can find it only in classless static route option,
+		 * so we are for sure parsing classless static route option now.
+		 * We go through whole the option to check whether there are no
+		 * missing/extra bytes.
+		 * I didn't find out how to improve the existing code and that's the
+		 * reason for this separate 'else' where I do my own checkings.
+		 * I know it's little bit unsystematic, but it works.
+		 */
+		numhunk = 0;
+		numelem = 2; /* RI */
+		fmtbuf[0]='R'; fmtbuf[1]='I'; fmtbuf[2]=0;
+		for (i =0; i < len; i = i + octets + 5) {
+			if (data[i] > 32) { /* subnet mask width */
+				log_error ("wrong subnet mask width in destination descriptor");
+				break;
+			}
+			numhunk++;
+			octets = ((data[i]+7) / 8);
+		}
+		if (i != len) {
+			log_error ("classless static routes option has wrong size or "
+					   "there's some garbage in format");
+		}
+	}
+	
 	/* Cycle through the array (or hunk) printing the data. */
 	for (i = 0; i < numhunk; i++) {
 		for (j = 0; j < numelem; j++) {
@@ -2249,6 +2286,18 @@ const char *pretty_print_option (option, data, len, emit_commas, emit_quotes)
 				strcpy(op, piaddr(iaddr));
 				dp += 4;
 				break;
+			      case 'R':
+				if (dp[0] <= 32)
+					iaddr.len = (((dp[0]+7)/8)+1);
+				else {
+					log_error ("wrong subnet mask width in destination descriptor");
+					return "<error>";
+				}
+
+				memcpy(iaddr.iabuf, dp, iaddr.len);
+				strcpy(op, pdestdesc(iaddr));
+				dp += iaddr.len;
+				break;
 			      case '6':
 				iaddr.len = 16;
 				memcpy(iaddr.iabuf, dp, 16);
diff --git a/common/parse.c b/common/parse.c
index 34b909a..85eafff 100644
--- a/common/parse.c
+++ b/common/parse.c
@@ -341,6 +341,38 @@ int parse_ip_addr (cfile, addr)
 }	
 
 /*
+ * + * destination-descriptor :== NUMBER DOT NUMBER |
+ * + *                            NUMBER DOT NUMBER DOT NUMBER |
+ * + *                            NUMBER DOT NUMBER DOT NUMBER DOT NUMBER |
+ * + *                            NUMBER DOT NUMBER DOT NUMBER DOT NUMBER DOT NUMBER
+ * + */
+int parse_destination_descriptor (cfile, addr)
+	struct parse *cfile;
+	struct iaddr *addr;
+{
+		unsigned int mask_width, dest_dest_len;
+		addr -> len = 0;
+		if (parse_numeric_aggregate (cfile, addr -> iabuf,
+									 &addr -> len, DOT, 10, 8)) {
+			mask_width = (unsigned int)addr->iabuf[0];
+			dest_dest_len = (((mask_width+7)/8)+1);
+			if (mask_width > 32) {
+				parse_warn (cfile,
+				"subnet mask width (%u) greater than 32.", mask_width);
+			}
+			else if (dest_dest_len != addr->len) {
+				parse_warn (cfile,
+				"destination descriptor with subnet mask width %u "
+				"should have %u octets, but has %u octets.",
+				mask_width, dest_dest_len, addr->len);
+			}
+
+		return 1;
+		}
+		return 0;
+}
+
+/*
  * Return true if every character in the string is hexadecimal.
  */
 static int
@@ -707,8 +739,10 @@ unsigned char *parse_numeric_aggregate (cfile, buf,
 		if (count) {
 			token = peek_token (&val, (unsigned *)0, cfile);
 			if (token != separator) {
-				if (!*max)
+				if (!*max) {
+					*max = count;
 					break;
+				}
 				if (token != RBRACE && token != LBRACE)
 					token = next_token (&val,
 							    (unsigned *)0,
@@ -1609,6 +1643,9 @@ int parse_option_code_definition (cfile, option)
 	      case IP_ADDRESS:
 		type = 'I';
 		break;
+	      case DESTINATION_DESCRIPTOR:
+		type = 'R';
+		break;
 	      case IP6_ADDRESS:
 		type = '6';
 		break;
@@ -5197,7 +5234,14 @@ int parse_option_token (rv, cfile, fmt, expr, uniform, lookups)
 				return 0;
 		}
 		break;
-
+	      case 'R': /* destination descriptor */
+		if (!parse_destination_descriptor (cfile, &addr)) {
+			return 0;
+		}
+		if (!make_const_data (&t, addr.iabuf, addr.len, 0, 1, MDL)) {
+			return 0;
+		}
+		break;
 	      case '6': /* IPv6 address. */
 		if (!parse_ip6_addr(cfile, &addr)) {
 			return 0;
@@ -5459,6 +5503,12 @@ int parse_option_decl (oc, cfile)
 				len = ip_addr.len;
 				dp = ip_addr.iabuf;
 
+				goto alloc;
+			      case 'R': /* destination descriptor */
+				if (!parse_destination_descriptor (cfile, &ip_addr))
+					goto exit;
+				len = ip_addr.len;
+				dp = ip_addr.iabuf;
 			      alloc:
 				if (hunkix + len > sizeof hunkbuf) {
 					parse_warn (cfile,
diff --git a/common/socket.c b/common/socket.c
index f0fa724..72d1966 100644
--- a/common/socket.c
+++ b/common/socket.c
@@ -50,6 +50,8 @@
 #include <linux/if_ether.h>
 #include <linux/if_packet.h>
 
+#define cprintf_10114_3 cprintf
+
 #ifdef USE_SOCKET_FALLBACK
 # if !defined (USE_SOCKET_SEND)
 #  define if_register_send if_register_fallback
@@ -1129,3 +1131,59 @@ void maybe_setup_fallback ()
 #endif
 }
 #endif /* USE_SOCKET_SEND */
+
+int set_ipv4_addr(char *if_name, char *if4_addr, char *if4_mask, int add_or_del)
+{
+	int sockfd;
+	struct ifreq ifr;
+	struct sockaddr_in* addr = (struct sockaddr_in*)&ifr.ifr_addr;
+	cprintf_10114_3("[%s][%s][%s][%d]\n", if_name, if4_addr, if4_mask, add_or_del);
+
+	if((sockfd = socket(AF_INET, SOCK_DGRAM, 0)) < 0)
+	{
+		perror("socket");
+		return -1;
+	}
+
+	strncpy(ifr.ifr_name, if_name, IFNAMSIZ);
+
+	ifr.ifr_addr.sa_family = AF_INET;
+	if(add_or_del == 1)
+	{
+		inet_pton(AF_INET, if4_addr, &addr->sin_addr);
+		if(ioctl(sockfd, SIOCSIFADDR, &ifr) < 0)
+		{
+			perror("SIOCSIFADDR");
+			close(sockfd);
+			return -1;
+		}
+
+		inet_pton(AF_INET, if4_mask, &addr->sin_addr);
+		if(ioctl(sockfd, SIOCSIFNETMASK, &ifr) < 0)
+		{
+			perror("SIOCSIFNETMASK");
+			close(sockfd);
+			return -1;
+		}
+	}
+	else
+	{
+		inet_pton(AF_INET, "0.0.0.0", &addr->sin_addr);
+		if(ioctl(sockfd, SIOCSIFADDR, &ifr) < 0)
+		{
+			perror("SIOCSIFADDR");
+			close(sockfd);
+			return -1;
+		}
+	}
+	
+#if 0
+	ioctl(sockfd, SIOCGIFFLAGS, &ifr);
+	ifr.ifr_flags |= (IFF_UP | IFF_RUNNING);
+	ioctl(sockfd, SIOCSIFFLAGS, &ifr);
+#endif
+
+	close(sockfd);
+	return 0;
+}
+
diff --git a/common/tables.c b/common/tables.c
index 9165a86..3e70587 100644
--- a/common/tables.c
+++ b/common/tables.c
@@ -51,6 +51,7 @@ HASH_FUNCTIONS (option_code, const unsigned *, struct option,
    Format codes:
 
    I - IPv4 address
+   R - destination descriptor (RFC3442)
    6 - IPv6 address
    l - 32-bit signed integer
    L - 32-bit unsigned integer
@@ -209,6 +210,7 @@ static struct option dhcp_options[] = {
 	{ "default-url", "t",			&dhcp_universe, 114, 1 },
 	{ "subnet-selection", "I",		&dhcp_universe, 118, 1 },
 	{ "domain-search", "Dc",		&dhcp_universe, 119, 1 },
+	{ "classless-static-routes", "RIA",	&dhcp_universe, 121, 1 },
 	{ "cablelabs-client-configuration", "Eccc.",
 						&dhcp_universe, 122, 1 },
 	{ "geographic-location", "X",		&dhcp_universe, 123, 1 },
diff --git a/includes/dhcp.h b/includes/dhcp.h
index 83427b2..4d9a2c0 100644
--- a/includes/dhcp.h
+++ b/includes/dhcp.h
@@ -161,6 +161,7 @@ struct dhcp_packet {
 #define DHO_CIVIC				99
 #define DHO_SUBNET_SELECTION			118 /* RFC3011! */
 #define DHO_DOMAIN_SEARCH			119 /* RFC3397 */
+#define DHO_CLASSLESS_STATIC_ROUTES		121 /* RFC3442 */
 #define DHO_CCC					122
 #define DHO_GEOGRAPHIC_LOCATION			123
 #define DHO_VIVCO_SUBOPTIONS			124
diff --git a/includes/dhcpd.h b/includes/dhcpd.h
index 0f64360..67738c6 100755
--- a/includes/dhcpd.h
+++ b/includes/dhcpd.h
@@ -2060,6 +2060,8 @@ isc_result_t delete_group (struct group_object *, int);
 isc_result_t supersede_group (struct group_object *, int);
 int clone_group (struct group **, struct group *, const char *, int);
 int write_group PROTO ((struct group_object *));
+int file_to_buf(const char *path, char *buf, int len);
+void buf_to_file(const char *path, const char *buf, int len);
 
 /* salloc.c */
 void relinquish_lease_hunks (void);
@@ -2285,6 +2287,7 @@ ssize_t receive_packet6(struct interface_info *interface,
 			unsigned int *if_index);
 void if_deregister6(struct interface_info *info);
 
+int set_ipv4_addr(char *, char *, char *, int);
 
 /* bpf.c */
 #if defined (USE_BPF_SEND) || defined (USE_BPF_RECEIVE)
@@ -2550,6 +2553,7 @@ isc_result_t range2cidr(struct iaddrcidrnetlist **result,
 			const struct iaddr *lo, const struct iaddr *hi);
 isc_result_t free_iaddrcidrnetlist(struct iaddrcidrnetlist **result);
 const char *piaddr PROTO ((struct iaddr));
+const char *pdestdesc PROTO ((struct iaddr));
 char *piaddrmask(struct iaddr *, struct iaddr *);
 char *piaddrcidr(const struct iaddr *, unsigned int);
 u_int16_t validate_port(char *);
@@ -2763,6 +2767,7 @@ void parse_client_lease_declaration PROTO ((struct parse *,
 int parse_option_decl PROTO ((struct option_cache **, struct parse *));
 void parse_string_list PROTO ((struct parse *, struct string_list **, int));
 int parse_ip_addr PROTO ((struct parse *, struct iaddr *));
+int parse_destination_descriptor PROTO ((struct parse *, struct iaddr *));
 int parse_ip_addr_with_subnet(struct parse *, struct iaddrmatch *);
 void parse_reject_statement PROTO ((struct parse *, struct client_config *));
 
diff --git a/includes/dhctoken.h b/includes/dhctoken.h
index 04fa901..06c5871 100644
--- a/includes/dhctoken.h
+++ b/includes/dhctoken.h
@@ -354,7 +354,8 @@ enum dhcp_token {
 	PREFIX6 = 657,
 	FIXED_PREFIX6 = 658,
 	CONFLICT_DONE = 660,
-	WAN_INDEX = 661
+	WAN_INDEX = 661,
+	DESTINATION_DESCRIPTOR = 662
 };
 
 #define is_identifier(x)	((x) >= FIRST_TOKEN &&	\
