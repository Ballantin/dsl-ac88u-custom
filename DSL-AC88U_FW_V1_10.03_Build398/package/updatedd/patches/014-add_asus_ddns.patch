    	o Jingwei Liang
    	Add asus ddns server support
    
    	modified:   Makefile.am
    	modified:   Makefile.in
    	new file:   libasus.c
    	new file:   libasus.h

diff --git a/src/plugins/Makefile.am b/src/plugins/Makefile.am
index 89abbfa..104ec6b 100644
--- a/src/plugins/Makefile.am
+++ b/src/plugins/Makefile.am
@@ -8,6 +8,7 @@ pkglib_LTLIBRARIES = libchangeip.la libdnsdynamic.la libdyndns.la libeurodyndns.
 pkglib_LTLIBRARIES += libSingTel.la
 pkglib_LTLIBRARIES += libdnsomatic.la
 pkglib_LTLIBRARIES += libtunnelbroker.la
+pkglib_LTLIBRARIES += libasus.la
 
 libchangeip_la_SOURCES = libchangeip.c libchangeip.h
 libchangeip_la_LIBADD  = $(top_builddir)/libupdatedd-exception/libupdatedd-exception.la
@@ -39,6 +40,8 @@ libdnsomatic_la_SOURCES = libdnsomatic.c libdnsomatic.h
 libdnsomatic_la_LIBADD  = $(top_builddir)/libupdatedd-exception/libupdatedd-exception.la
 libtunnelbroker_la_SOURCES = libtunnelbroker.c libtunnelbroker.h md5.c md5.h
 libtunnelbroker_la_LIBADD  = $(top_builddir)/libupdatedd-exception/libupdatedd-exception.la
+libasus_la_SOURCES = libasus.c libasus.h md5.c md5.h
+libasus_la_LIBADD  = $(top_builddir)/libupdatedd-exception/libupdatedd-exception.la
 
 ## include dir
 INCLUDES = -I$(top_srcdir)/include
@@ -48,3 +51,4 @@ include_HEADERS = libchangeip.h libdnsdynamic.h libdyndns.h libeurodyndns.h libh
 include_HEADERS += libSingTel.h
 include_HEADERS += libdnsomatic.h
 include_HEADERS += libtunnelbroker.h
+include_HEADERS += libasus.h
diff --git a/src/plugins/Makefile.in b/src/plugins/Makefile.in
index 799e1ed..abece00 100644
--- a/src/plugins/Makefile.in
+++ b/src/plugins/Makefile.in
@@ -102,6 +102,9 @@ libdnsomatic_la_OBJECTS = $(am_libdnsomatic_la_OBJECTS)
 libtunnelbroker_la_DEPENDENCIES = $(top_builddir)/libupdatedd-exception/libupdatedd-exception.la
 am_libtunnelbroker_la_OBJECTS = libtunnelbroker.lo
 libtunnelbroker_la_OBJECTS = $(am_libtunnelbroker_la_OBJECTS)
+libasus_la_DEPENDENCIES = $(top_builddir)/libupdatedd-exception/libupdatedd-exception.la
+am_libasus_la_OBJECTS = libasus.lo
+libasus_la_OBJECTS = $(am_libasus_la_OBJECTS)
 DEFAULT_INCLUDES = -I. -I$(srcdir) -I$(top_builddir)
 depcomp = $(SHELL) $(top_srcdir)/depcomp
 am__depfiles_maybe = depfiles
@@ -122,6 +125,7 @@ SOURCES = $(libchangeip_la_SOURCES) $(libdyndns_la_SOURCES) \
 SOURCES += $(libSingTel_la_SOURCES)
 SOURCES += $(libdnsomatic_la_SOURCES)
 SOURCES += $(libtunnelbroker_la_SOURCES)
+SOURCES += $(libasus_la_SOURCES)
 DIST_SOURCES = $(libchangeip_la_SOURCES) $(libdyndns_la_SOURCES) \
 	$(libeurodyndns_la_SOURCES) $(libhn_la_SOURCES) \
 	$(libnoip_la_SOURCES) $(libods_la_SOURCES) \
@@ -131,6 +135,7 @@ DIST_SOURCES = $(libchangeip_la_SOURCES) $(libdyndns_la_SOURCES) \
 DIST_SOURCES += $(libSingTel_la_SOURCES)
 DIST_SOURCES += $(libdnsomatic_la_SOURCES)
 DIST_SOURCES += $(libtunnelbroker_la_SOURCES)
+DIST_SOURCES += $(libasus_la_SOURCES)
 
 includeHEADERS_INSTALL = $(INSTALL_HEADER)
 HEADERS = $(include_HEADERS)
@@ -256,6 +261,7 @@ pkglib_LTLIBRARIES = libchangeip.la libdnsdynamic.la libdyndns.la libeurodyndns.
 pkglib_LTLIBRARIES += libSingTel.la
 pkglib_LTLIBRARIES += libdnsomatic.la
 pkglib_LTLIBRARIES += libtunnelbroker.la
+pkglib_LTLIBRARIES += libasus.la
 libchangeip_la_SOURCES = libchangeip.c libchangeip.h
 libchangeip_la_LIBADD = $(top_builddir)/libupdatedd-exception/libupdatedd-exception.la
 libdnsdynamic_la_SOURCES = libdnsdynamic.c libdnsdynamic.h
@@ -286,11 +292,14 @@ libdnsomatic_la_SOURCES = libdnsomatic.c libdnsomatic.h
 libdnsomatic_la_LIBADD = $(top_builddir)/libupdatedd-exception/libupdatedd-exception.la
 libtunnelbroker_la_SOURCES = libtunnelbroker.c libtunnelbroker.h md5.c md5.h
 libtunnelbroker_la_LIBADD = $(top_builddir)/libupdatedd-exception/libupdatedd-exception.la
+libasus_la_SOURCES = libasus.c libasus.h md5.c md5.h
+libasus_la_LIBADD = $(top_builddir)/libupdatedd-exception/libupdatedd-exception.la
 INCLUDES = -I$(top_srcdir)/include
 include_HEADERS = libdnsdynamic.h libdnsdynamic.h libdyndns.h libeurodyndns.h libhn.h libnoip.h libods.h libovh.h libregfish.h libtzo.h libzoneedit.h
 include_HEADERS += libSingTel.h
 include_HEADERS += libdnsomatic.h
 include_HEADERS += libtunnelbroker.h
+include_HEADERS += libasus.h
 all: all-am
 
 .SUFFIXES:
@@ -379,6 +388,8 @@ libdnsomatic.la: $(libdnsomatic_la_OBJECTS) $(libdnsomatic_la_DEPENDENCIES)
 	$(LINK) -rpath $(pkglibdir) $(libdnsomatic_la_LDFLAGS) $(libdnsomatic_la_OBJECTS) $(libdnsomatic_la_LIBADD) $(LIBS)
 libtunnelbroker.la: $(libtunnelbroker_la_OBJECTS) $(libtunnelbroker_la_DEPENDENCIES)
 	$(LINK) -rpath $(pkglibdir) $(libtunnelbroker_la_LDFLAGS) $(libtunnelbroker_la_OBJECTS) $(libtunnelbroker_la_LIBADD) $(LIBS)
+libasus.la: $(libasus_la_OBJECTS) $(libasus_la_DEPENDENCIES)
+	$(LINK) -rpath $(pkglibdir) $(libasus_la_LDFLAGS) $(libasus_la_OBJECTS) $(libasus_la_LIBADD) $(LIBS)
 
 mostlyclean-compile:
 	-rm -f *.$(OBJEXT)
@@ -400,6 +411,7 @@ distclean-compile:
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libSingTel.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libdnsomatic.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libtunnelbroker.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libasus.Plo@am__quote@
 
 .c.o:
 @am__fastdepCC_TRUE@	if $(COMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" -c -o $@ $<; \
diff --git a/src/plugins/libasus.c b/src/plugins/libasus.c
new file mode 100644
index 0000000..ce158ad
--- /dev/null
+++ b/src/plugins/libasus.c
@@ -0,0 +1,550 @@
+/* -- updatedd: libasus.c --
+ *
+ * Copyright (C) 2002, 2003, 2004, 2005 Philipp Benner
+ *
+ * This file is part of UpdateDD - http://updatedd.philipp-benner.de.
+ *
+ * UpdateDD is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * any later version.
+ *
+ * UpdateDD is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with UpdateDD; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ */
+
+/*
+ * Arcadyan Corp. Jingwei Liang 2015/06
+ * More informations please refer http://nwsrv-ns1.asus.com/
+ * 
+ */
+
+#include <config.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <stdarg.h>
+#include <ctype.h>
+#include <unistd.h>
+#include <getopt.h>
+
+#include <base64encode.h>
+#include <get_connection.h>
+#include <updatedd-exception.h>
+#include <ret_codes.h>
+#include <version.h>
+
+#include "libasus.h"
+
+/**************** Port from asuswrt gpl code *****************/
+#include "md5.h"
+
+//#define DEBUG
+#ifdef DEBUG
+#   define DBG(fmt,args...)     fprintf (stderr, fmt, ## args);
+#else
+#   define DBG(fmt,args...)   
+#endif 
+
+//#define DUMP_KEY
+#ifdef DUMP_KEY
+#define DUMP(k) dump (k, sizeof (k))
+#else
+#define DUMP(k)
+#endif
+
+static void ret_msg(int mode, const char *fmt, ...);
+
+static int 
+wl_wscPincheck(char *pin_string)
+{
+    unsigned long PIN = strtoul(pin_string, NULL, 10 );;
+    unsigned long int accum = 0;
+ 
+    accum += 3 * ((PIN / 10000000) % 10); 
+    accum += 1 * ((PIN / 1000000) % 10); 
+    accum += 3 * ((PIN / 100000) % 10); 
+    accum += 1 * ((PIN / 10000) % 10); 
+    accum += 3 * ((PIN / 1000) % 10); 
+    accum += 1 * ((PIN / 100) % 10); 
+    accum += 3 * ((PIN / 10) % 10); 
+    accum += 1 * ((PIN / 1) % 10); 
+ 
+    if (0 == (accum % 10))
+	return 0;   // The PIN code is Vaild.
+    else
+	return 1;    // Invalid
+}
+
+#ifdef DUMP_KEY
+static void dump (unsigned char *p, unsigned int l)
+{
+    unsigned int i;
+    if (p == NULL || l == 0)
+        return;
+
+    printf ("0x");
+    for (i = 0; i < l; ++i)
+        printf ("%02x", p[i]);
+    printf ("\n\n");
+}
+#endif  // DUMP_KEY
+
+static int
+alnum_cpy (unsigned char *d, unsigned char *s, unsigned int max_dlen)
+{
+	unsigned char *old_d, *max_d;
+	
+	if (d == NULL || s == NULL || max_dlen == 0)
+		return 0;
+
+	old_d = d;
+	max_d = d + max_dlen;
+	while (*s != '\0' && d < max_d)	{
+		if (isalnum (*s))
+			*d++ = *s;
+		s++;
+	}
+
+	// out of range
+	if (d == max_d)	{
+		*(d-1) = '\0';
+	}
+
+	return (int) (d - old_d);
+}
+
+static void hm(text, text_len, key, key_len, digest)
+unsigned char *text;			/* pointer to data stream */
+int text_len;					/* length of data stream */
+unsigned char *key;				/* pointer to authentication key */
+int key_len;					/* length of authentication key */
+unsigned char *digest;			/* caller digest to be filled in */
+
+{
+	struct md5_ctx context;
+	unsigned char k_ipad[65];	/* inner padding -
+								 * key XORd with ipad
+								 */
+	unsigned char k_opad[65];	/* outer padding -
+								 * key XORd with opad
+								 */
+	unsigned char tk[16];
+	int i;
+	/* if key is longer than 64 bytes reset it to key=MD5(key) */
+	if (key_len > 64) {
+		struct md5_ctx tctx;
+		md5_init_ctx(&tctx);
+		md5_process_bytes(key, key_len, &tctx);
+		md5_finish_ctx(&tctx, tk);
+
+		key = tk;
+		key_len = 16;
+	}
+
+	/*
+	 * the HMAC_MD5 transform looks like:
+	 *
+	 * MD5(K XOR opad, MD5(K XOR ipad, text))
+	 *
+	 * where K is an n byte key
+	 * ipad is the byte 0x36 repeated 64 times
+	 * opad is the byte 0x5c repeated 64 times
+	 * and text is the data being protected
+	 */
+
+	/* start out by storing key in pads */
+	bzero(k_ipad, sizeof k_ipad);
+	bzero(k_opad, sizeof k_opad);
+	bcopy(key, k_ipad, key_len);
+	bcopy(key, k_opad, key_len);
+
+	/* XOR key with ipad and opad values */
+	for (i = 0; i < 64; i++) {
+		k_ipad[i] ^= 0x36;
+		k_opad[i] ^= 0x5c;
+	}
+	/*
+	 * perform inner MD5
+	 */
+	md5_init_ctx(&context);						/* init context for 1st * pass */
+	md5_process_bytes(k_ipad, 64, &context);	/* start with inner pad */
+	md5_process_bytes(text, text_len, &context);/* then text of datagram */
+	md5_finish_ctx(&context, digest);			/* finish up 1st pass */
+	/*
+	 * perform outer MD5
+	 */
+	md5_init_ctx(&context);						/* init context for 2nd * pass */
+	md5_process_bytes(k_opad, 64, &context);	/* start with outer pad */
+	md5_process_bytes(digest, 16, &context);	/* then results of 1st * hash */
+	md5_finish_ctx(&context, digest);			/* finish up 2nd pass */
+}
+
+// Generate password according to MAC address
+static int asus_private(char *auth, struct arguments *args)
+{
+	int i, c;
+	unsigned char *p, user[256], hwaddr[6], hwaddr_str[18], key[64], msg[256], ipbuf[20], bin_pwd[16];
+
+	memset (hwaddr, 0, sizeof (hwaddr));
+	memset (key, 0, sizeof (key));
+	memset (msg, 0, sizeof (msg));
+	memset (user, 0, sizeof (user));
+	memset (bin_pwd, 0, sizeof (bin_pwd));
+
+	/* Get wan MAC */
+	strncpy (hwaddr_str, args->wanmac, sizeof (hwaddr_str));
+	p = hwaddr_str;
+	strtok (hwaddr_str, ":");
+	for (i = 0; i < 6; ++i)	{
+		if (p == NULL)	{
+			ret_msg(PERR,"ERROR: %s() can not convert MAC address\n", __FUNCTION__);
+			return -1;
+		}
+		hwaddr[i] = strtoul (p, NULL, 16);
+		p = strtok (NULL, ":");
+	}
+	DBG ("MAC %02X:%02X:%02X:%02X:%02X:%02X\n", hwaddr[0], hwaddr[1], hwaddr[2], hwaddr[3], hwaddr[4], hwaddr[5]);
+
+	/* Get wps PIN */
+	strncpy (key, args->wpspin, sizeof (key));
+	c = wl_wscPincheck (key);
+	DBG ("secret code (%s) is %s\n", key, (c == 0)?"valid":"INVALID");
+	if (c)
+		ret_msg(NONE,"WARNING: invalid secret code (%s)?\n", key);
+
+	DUMP (key);
+
+	/* Get ip address*/
+	snprintf(ipbuf, sizeof(ipbuf), "%s", args->ipv4);
+
+	// generate m
+	i = alnum_cpy (msg, args->hostname, sizeof (msg));
+	alnum_cpy (msg + i, ipbuf, sizeof (msg) - strlen (msg));
+	DBG ("%s(): m is (%s) len %d\n", __FUNCTION__, msg, strlen (msg));
+
+	// generate password
+	hm(msg, strlen (msg), key, 64, bin_pwd);
+
+	//2007.03.19 Yau change snprintf -> sprintf
+	// This function is used to override "auth"
+	for (i = 0; i < 6; ++i)
+		//snprintf (user, sizeof (user), "%s%02X", user, hwaddr[i]);
+		sprintf (user, "%s%02X", user, hwaddr[i]);
+	//snprintf (user, sizeof (user), "%s:", user);
+	sprintf (user, "%s:", user);
+
+	for (i = 0; i < 16; ++i)
+		//snprintf (user, sizeof (user), "%s%02X", user, bin_pwd[i]);
+		sprintf (user, "%s%02X", user, bin_pwd[i]);
+
+	DBG ("%s(): user and password (%s)\n", __FUNCTION__, user);
+	base64encode(user, auth);
+	//PRINT("auth[] is overrode.\n");
+	DBG("new auth[] is (%s)\n", auth);
+
+	return 0;
+}
+/**************** Port from asuswrt gpl code *****************/
+
+static void
+print_usage(char *pname, FILE *fp)
+{
+	(void)fprintf(fp,
+		      "\nUsage: %s [...] %s -- [OPTION]... [USERNAME:PASSWORD] HOSTNAME\n\n",
+		      pname, COLORED("asus"));
+	(void)fprintf(fp,
+		      "For security reasons use the environment variable LOGIN instead of\n"
+		      "passing the login information directly.\n\n"
+		      "Options:\n"
+		      "   -4    --ipv4 <address>        ip address version 4\n"
+		      "   -M    --mac <mac address>     wan mac address\n"
+		      "   -p    --pin <pin num>         wps pin number\n"
+		      "         --help                  print help and exit\n"
+		      "         --version               display version information and exit\n\n"
+		      "Report bugs to <"EMAIL">.\n\n");
+	return;
+}
+
+static void
+print_version(FILE *fp)
+{
+        
+	(void)fprintf(fp,
+		      "\n" PNAME " plugin for nwsrv-ns1.asus.com, version 1.0,\n"
+		      "Copyright (C) 2015 Arcadyan Corp.\n\n"
+
+		      "This is free software, and you are welcome to redistribute it\n"
+		      "under certain conditions; see the source for copying conditions.\n"
+		      "There is NO warranty; not even for MERCHANTABILITY or FITNESS\n"
+		      "FOR A PARTICULAR PURPOSE.\n\n");
+	return;
+}
+
+static void
+ret_msg(int mode, const char *fmt, ...)
+{
+        
+	va_list az;
+        
+	va_start(az, fmt);
+	(void)vs_warn(ret_msg_buf, BUFSIZE, mode, fmt, az);
+	va_end(az);
+        
+	return;
+        
+}
+
+int
+dyndns(int argc, char *argv[])
+{
+        
+	struct arguments args;
+	int s, ret;
+	const char *ptr;
+
+	(void)memset(&args, 0, sizeof(struct arguments));
+	
+	if(get_flags(&args, argc, argv) != RET_OK) {
+		return RET_WRONG_USAGE;
+	}
+        
+	s = get_connection(DYNDNSHOST, PORT, &ptr);
+	if(s == -1) {
+		ret_msg(HERR, "%s: %s", ptr, DYNDNSHOST);
+		ret = RET_WARNING;
+	} else {
+		ret = update_dyndns(s, &args);
+		if(ret == RET_OK) {
+			ret = check_server_msg(s, args.hostname);
+		}
+		(void)close(s);
+	}
+        
+	return ret;
+
+}
+
+static void
+stolower(char *str, char *buf, size_t size)
+{
+
+	int n;
+        
+	for(n = 0; n < size && str[n] != '\0'; n++) {
+		buf[n] = tolower(str[n]);
+	}
+	buf[n] = '\0';
+
+	return;
+        
+}
+
+static int
+get_flags(struct arguments *args, int argc, char *argv[])
+{
+        
+	int c;
+        
+	for(;;) {
+                
+		int option_index = 0;
+		static struct option long_options[] = {
+			{ "ipv4",			1, 0, '4' },
+			{ "help",			0, 0, 'h' },
+			{ "version",		0, 0, 'v' },
+			{ "mac",			1, 0, 'M' },
+			{ "pin",			1, 0, 'p' },
+			{ NULL,				0, 0, 0   }
+		};
+                
+		c = getopt_long(argc, argv, "4:M:p:w:",
+				long_options, &option_index);
+                
+		if(c == -1) break;
+                
+		switch(c) {
+		case '4':
+			args->ipv4 = optarg;
+			break;
+		case 'h':
+			print_usage(argv[ARGV_PNAME], stdout);
+			exit(EXIT_SUCCESS);
+		case 'v':
+			print_version(stdout);
+			exit(EXIT_SUCCESS);
+		case 'M':
+			args->wanmac = optarg;
+			break;
+		case 'p':
+			args->wpspin = optarg;
+			break;
+		}
+	}
+
+	/*
+	switch(argc-optind) {
+        default:
+		ret_msg(NONE, "wrong usage");
+		return RET_WRONG_USAGE;
+                
+        case 2:
+		args->login = getenv("LOGIN");
+		if(args->login == NULL) {
+			ret_msg(NONE,
+				"environment variable LOGIN is empty");
+			return RET_WRONG_USAGE;
+		}
+		break;
+        case 3:
+		args->login = argv[ARGV_LOGIN];
+	}
+	*/
+	args->hostname = argv[ARGV_HOSTNAME];
+        
+	return RET_OK;
+        
+}
+
+#define BUFLEN		4096
+#define BUFFREE(name)	BUFLEN - strlen(name)
+
+static int
+update_dyndns(const int s, struct arguments *args)
+{
+
+	char b64user[512] = {0};
+	char message[BUFLEN];
+        
+	if(asus_private(b64user, args) != 0) {
+		ret_msg(PERR, "Generate asus private user string fail.");
+		return RET_WARNING;
+	}
+	
+	(void)snprintf(message, BUFLEN,
+                       "GET /ddns/update.jsp?hostname=%s",
+                       args->hostname);
+ 
+	if(args->ipv4) {
+		(void)strncat(message, "&myip=", BUFFREE(message));
+		(void)strncat(message, args->ipv4, BUFFREE(message));
+	}
+        
+	{
+		char buffer[1024];
+                
+		(void)snprintf(buffer, 1024,
+                               " HTTP/1.1\r\n"
+                               "Host: %s\r\n"
+                               "Authorization: Basic %s\r\n"    //asus auth
+                               "User-Agent: %s %s - %s\r\n"
+                               "Connection: close\r\n"
+                               "Pragma: no-cache\r\n\r\n",
+                               DYNDNSHOST, b64user, PNAME, VERSION, HOMEPAGE);
+		(void)strncat(message, buffer, BUFLEN - 1 - strlen(message));
+	}
+	print_debug("\n\nMessage:"
+		    "\n--------------------------------------\n"
+		    "%s--------------------------------------\n\n",
+                    message);
+	
+	if(write(s, message, strlen(message)) == -1) {
+		ret_msg(PERR, "write() failed");
+		return RET_WARNING;
+	}
+        
+	return RET_OK;
+}
+
+static int
+check_server_msg(int s, const char *hostname)
+{
+        
+	int ret;
+	char server_msg[BUFSIZE], *ptr = NULL;
+	char rtn_msg[BUFSIZE];
+	char cmd[128] = {0};
+        
+	(void)memset(rtn_msg, 0, sizeof(rtn_msg));
+	/* get server_msg */
+	(void)memset(server_msg, 0, sizeof(server_msg));
+	if(read(s, server_msg, sizeof(server_msg) - 1) < 0) {
+		ret_msg(PERR, "read() failed");
+		return RET_WARNING;
+	}
+        
+	print_debug("\n\nServer message:"
+		    "\n--------------------------------------\n"
+		    "%s--------------------------------------\n\n",
+		    server_msg);
+
+	if (sscanf(server_msg, " HTTP/1.%*c %3d", &ret) != 1)
+	{
+		ret = -1;
+	}
+
+	// looking for 2-th '|'
+	ptr = strchr(server_msg, '|');
+	if (ptr != NULL)
+		ptr = strchr(ptr+1, '|');
+	if (ptr == NULL)
+		ptr = "";
+
+	//FIXME:hard code to index 0
+	sprintf(cmd,"mng_cli tmp_set ARC_DDNS_0_RtnCode=%d",ret);   //for webUI to show update status
+	system(cmd);
+
+	switch (ret)
+	{
+		case -1:
+			ret_msg(NONE, "nwsrv-ns1.asus.com: strange server response, are you connecting to the right server?");
+			break;
+		case 200:
+			ret_msg(NONE, "nwsrv-ns1.asus.com: Update good and successful, IP updated");
+			return RET_OK;
+			break;
+		case 220:
+			ret_msg(NONE, "nwsrv-ns1.asus.com: Update same domain success");
+			return RET_OK;
+			break;
+		case 230:
+			sscanf (ptr, "|%[^|\r\n]c", rtn_msg);
+			ret_msg(NONE, "nwsrv-ns1.asus.com: Update new domain success. Old domain name is: %s",rtn_msg);
+			return RET_OK;
+			break;
+		case 203:
+			sscanf (ptr, "|%[^|\r\n]c", rtn_msg);
+			ret_msg(NONE, "nwsrv-ns1.asus.com: Update failed(203). Suggest domain name: %s",rtn_msg);
+			break;
+		case 233:
+			ret_msg(NONE, "nwsrv-ns1.asus.com: Update failed. (233)");
+			break;
+		case 297:
+			ret_msg(NONE, "nwsrv-ns1.asus.com: Invalid hostname");
+			break;
+		case 298:
+			ret_msg(NONE, "nwsrv-ns1.asus.com: Invalid domain name");
+			break;
+		case 299:
+			ret_msg(NONE, "nwsrv-ns1.asus.com: Invalid wan IP format");
+			break;
+		case 401:
+			ret_msg(NONE, "nwsrv-ns1.asus.com: Authentication failure");
+			break;
+		case 407:
+			ret_msg(NONE, "nwsrv-ns1.asus.com: Proxy authentication Required.");
+			break;
+		default:
+			sscanf(server_msg, " HTTP/1.%*c %*3d %255[^\r\n]", rtn_msg);
+	        ret_msg(NONE, "unknown return code: %s", rtn_msg);
+			break;
+	}
+
+	return RET_ERROR;
+}
diff --git a/src/plugins/libasus.h b/src/plugins/libasus.h
new file mode 100644
index 0000000..b31a7f2
--- /dev/null
+++ b/src/plugins/libasus.h
@@ -0,0 +1,62 @@
+/* -- updatedd: libasus.h --
+ *
+ * Copyright (C) 2002, 2003, 2004, 2005 Philipp Benner
+ *
+ * This file is part of UpdateDD - http://updatedd.philipp-benner.de.
+ *
+ * UpdateDD is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * any later version.
+ *
+ * UpdateDD is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with UpdateDD; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ */
+
+/*
+ * Arcadyan Corp. Jingwei Liang 2015/06
+ * More informations please refer http://nwsrv-ns1.asus.com/
+ * 
+ */
+
+#include <ret_codes.h>
+
+#define DYNDNSHOST	"nwsrv-ns1.asus.com"
+#define PORT		80
+
+#define BUFSIZE		512
+
+#define ARGV_PNAME	0
+#define ARGV_LOGIN	argc-2
+#define ARGV_HOSTNAME	argc-1
+
+#define COLORED(x)	"\033[0;31;1m"x"\033[0m"
+
+static char ret_msg_buf[BUFSIZE];
+
+struct arguments {
+//	const char *backmx;
+	const char *hostname;
+	char *ipv4;
+//	char *mx;
+//	char *login;
+//	const char *wildcard;
+	char *wanmac;
+	char *wpspin;
+};
+
+static int get_flags(struct arguments *args, int argc, char *argv[]);
+static int update_dyndns(const int s, struct arguments *args);
+static int check_server_msg(const int s, const char *hostnames);
+
+char *
+get_retmsg(void)
+{
+	return ret_msg_buf;
+}
