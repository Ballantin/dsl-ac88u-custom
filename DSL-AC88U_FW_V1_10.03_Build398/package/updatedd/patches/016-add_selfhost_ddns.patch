		o Jingwei Liang
    	Add selfhost ddns server support
    
    	modified:   src/plugins/Makefile.am
    	modified:   src/plugins/Makefile.in
    	new file:   src/plugins/libselfhost.c
    	new file:   src/plugins/libselfhost.h

diff --git a/src/plugins/Makefile.am b/src/plugins/Makefile.am
index 9eff814..9e61003 100644
--- a/src/plugins/Makefile.am
+++ b/src/plugins/Makefile.am
@@ -10,6 +10,7 @@ pkglib_LTLIBRARIES += libdnsomatic.la
 pkglib_LTLIBRARIES += libtunnelbroker.la
 pkglib_LTLIBRARIES += libasus.la
 pkglib_LTLIBRARIES += libnamemaster.la
+pkglib_LTLIBRARIES += libselfhost.la
 
 libchangeip_la_SOURCES = libchangeip.c libchangeip.h
 libchangeip_la_LIBADD  = $(top_builddir)/libupdatedd-exception/libupdatedd-exception.la
@@ -45,6 +46,8 @@ libasus_la_SOURCES = libasus.c libasus.h md5.c md5.h
 libasus_la_LIBADD  = $(top_builddir)/libupdatedd-exception/libupdatedd-exception.la
 libnamemaster_la_SOURCES = libnamemaster.c libnamemaster.h
 libnamemaster_la_LIBADD  = $(top_builddir)/libupdatedd-exception/libupdatedd-exception.la
+libselfhost_la_SOURCES = libselfhost.c libselfhost.h
+libselfhost_la_LIBADD  = $(top_builddir)/libupdatedd-exception/libupdatedd-exception.la
 
 ## include dir
 INCLUDES = -I$(top_srcdir)/include
@@ -56,3 +59,4 @@ include_HEADERS += libdnsomatic.h
 include_HEADERS += libtunnelbroker.h
 include_HEADERS += libasus.h
 include_HEADERS += libnamemaster.h
+include_HEADERS += libselfhost.h
diff --git a/src/plugins/Makefile.in b/src/plugins/Makefile.in
index 7fdd7ce..7d88b4f 100644
--- a/src/plugins/Makefile.in
+++ b/src/plugins/Makefile.in
@@ -108,6 +108,9 @@ libasus_la_OBJECTS = $(am_libasus_la_OBJECTS)
 libnamemaster_la_DEPENDENCIES = $(top_builddir)/libupdatedd-exception/libupdatedd-exception.la
 am_libnamemaster_la_OBJECTS = libnamemaster.lo
 libnamemaster_la_OBJECTS = $(am_libnamemaster_la_OBJECTS)
+libselfhost_la_DEPENDENCIES = $(top_builddir)/libupdatedd-exception/libupdatedd-exception.la
+am_libselfhost_la_OBJECTS = libselfhost.lo
+libselfhost_la_OBJECTS = $(am_libselfhost_la_OBJECTS)
 DEFAULT_INCLUDES = -I. -I$(srcdir) -I$(top_builddir)
 depcomp = $(SHELL) $(top_srcdir)/depcomp
 am__depfiles_maybe = depfiles
@@ -130,6 +133,7 @@ SOURCES += $(libdnsomatic_la_SOURCES)
 SOURCES += $(libtunnelbroker_la_SOURCES)
 SOURCES += $(libasus_la_SOURCES)
 SOURCES += $(libnamemaster_la_SOURCES)
+SOURCES += $(libselfhost_la_SOURCES)
 DIST_SOURCES = $(libchangeip_la_SOURCES) $(libdyndns_la_SOURCES) \
 	$(libeurodyndns_la_SOURCES) $(libhn_la_SOURCES) \
 	$(libnoip_la_SOURCES) $(libods_la_SOURCES) \
@@ -141,6 +145,7 @@ DIST_SOURCES += $(libdnsomatic_la_SOURCES)
 DIST_SOURCES += $(libtunnelbroker_la_SOURCES)
 DIST_SOURCES += $(libasus_la_SOURCES)
 DIST_SOURCES += $(libnamemaster_la_SOURCES)
+DIST_SOURCES += $(libselfhost_la_SOURCES)
 
 includeHEADERS_INSTALL = $(INSTALL_HEADER)
 HEADERS = $(include_HEADERS)
@@ -268,6 +273,7 @@ pkglib_LTLIBRARIES += libdnsomatic.la
 pkglib_LTLIBRARIES += libtunnelbroker.la
 pkglib_LTLIBRARIES += libasus.la
 pkglib_LTLIBRARIES += libnamemaster.la
+pkglib_LTLIBRARIES += libselfhost.la
 libchangeip_la_SOURCES = libchangeip.c libchangeip.h
 libchangeip_la_LIBADD = $(top_builddir)/libupdatedd-exception/libupdatedd-exception.la
 libdnsdynamic_la_SOURCES = libdnsdynamic.c libdnsdynamic.h
@@ -302,6 +308,8 @@ libasus_la_SOURCES = libasus.c libasus.h md5.c md5.h
 libasus_la_LIBADD = $(top_builddir)/libupdatedd-exception/libupdatedd-exception.la
 libnamemaster_la_SOURCES = libnamemaster.c libnamemaster.h
 libnamemaster_la_LIBADD = $(top_builddir)/libupdatedd-exception/libupdatedd-exception.la
+libselfhost_la_SOURCES = libselfhost.c libselfhost.h
+libselfhost_la_LIBADD = $(top_builddir)/libupdatedd-exception/libupdatedd-exception.la
 INCLUDES = -I$(top_srcdir)/include
 include_HEADERS = libdnsdynamic.h libdnsdynamic.h libdyndns.h libeurodyndns.h libhn.h libnoip.h libods.h libovh.h libregfish.h libtzo.h libzoneedit.h
 include_HEADERS += libSingTel.h
@@ -309,6 +317,7 @@ include_HEADERS += libdnsomatic.h
 include_HEADERS += libtunnelbroker.h
 include_HEADERS += libasus.h
 include_HEADERS += libnamemaster.h
+include_HEADERS += libselfhost.h
 all: all-am
 
 .SUFFIXES:
@@ -401,6 +410,8 @@ libasus.la: $(libasus_la_OBJECTS) $(libasus_la_DEPENDENCIES)
 	$(LINK) -rpath $(pkglibdir) $(libasus_la_LDFLAGS) $(libasus_la_OBJECTS) $(libasus_la_LIBADD) $(LIBS)
 libnamemaster.la: $(libnamemaster_la_OBJECTS) $(libnamemaster_la_DEPENDENCIES)
 	$(LINK) -rpath $(pkglibdir) $(libnamemaster_la_LDFLAGS) $(libnamemaster_la_OBJECTS) $(libnamemaster_la_LIBADD) $(LIBS)
+libselfhost.la: $(libselfhost_la_OBJECTS) $(libselfhost_la_DEPENDENCIES)
+	$(LINK) -rpath $(pkglibdir) $(libselfhost_la_LDFLAGS) $(libselfhost_la_OBJECTS) $(libselfhost_la_LIBADD) $(LIBS)
 
 mostlyclean-compile:
 	-rm -f *.$(OBJEXT)
@@ -424,6 +435,7 @@ distclean-compile:
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libtunnelbroker.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libasus.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libnamemaster.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libselfhost.Plo@am__quote@
 
 .c.o:
 @am__fastdepCC_TRUE@	if $(COMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" -c -o $@ $<; \
diff --git a/src/plugins/libselfhost.c b/src/plugins/libselfhost.c
new file mode 100644
index 0000000..7dcb601
--- /dev/null
+++ b/src/plugins/libselfhost.c
@@ -0,0 +1,310 @@
+/* -- updatedd: libselfhost.c --
+ *
+ * Copyright (C) 2002, 2003, 2004, 2005 Philipp Benner
+ *
+ * This file is part of UpdateDD - http://updatedd.philipp-benner.de.
+ *
+ * UpdateDD is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * any later version.
+ *
+ * UpdateDD is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with UpdateDD; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ */
+
+/*
+ * Arcadyan Corp. Jingwei Liang 2015/07
+ * More informations please refer http://www.selfhost.de/
+ * 
+ */
+
+#include <config.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <stdarg.h>
+#include <ctype.h>
+#include <unistd.h>
+#include <getopt.h>
+
+#include <base64encode.h>
+#include <get_connection.h>
+#include <updatedd-exception.h>
+#include <ret_codes.h>
+#include <version.h>
+
+#include "libselfhost.h"
+
+static void
+print_usage(char *pname, FILE *fp)
+{
+	(void)fprintf(fp,
+		      "\nUsage: %s [...] %s -- [OPTION]... [USERNAME:PASSWORD] HOSTNAME\n\n",
+		      pname, COLORED("selfhost"));
+	(void)fprintf(fp,
+		      "For security reasons use the environment variable LOGIN instead of\n"
+		      "passing the login information directly.\n\n"
+		      "Options:\n"
+		      "   -4    --ipv4 <address>        ip address version 4\n"
+		      "   -w    --wildcard <on|off>     switch wildcard on or off\n"
+		      "         --help                  print help and exit\n"
+		      "         --version               display version information and exit\n\n"
+		      "Report bugs to <"EMAIL">.\n\n");
+        
+	return;
+}
+
+static void
+print_version(FILE *fp)
+{
+        
+	(void)fprintf(fp,
+		      "\n" PNAME " plugin for www.selfhost.de, version 1.0,\n"
+		      "Copyright (C) 2015 Arcadyan Corp.\n\n"
+
+		      "This is free software, and you are welcome to redistribute it\n"
+		      "under certain conditions; see the source for copying conditions.\n"
+		      "There is NO warranty; not even for MERCHANTABILITY or FITNESS\n"
+		      "FOR A PARTICULAR PURPOSE.\n\n");
+
+	return;
+        
+}
+
+static void
+ret_msg(int mode, const char *fmt, ...)
+{
+        
+	va_list az;
+        
+	va_start(az, fmt);
+	(void)vs_warn(ret_msg_buf, BUFSIZE, mode, fmt, az);
+	va_end(az);
+        
+	return;
+        
+}
+
+int
+dyndns(int argc, char *argv[])
+{
+        
+	struct arguments args;
+	int s, ret;
+	const char *ptr;
+
+	(void)memset(&args, 0, sizeof(struct arguments));
+	
+	if(get_flags(&args, argc, argv) != RET_OK) {
+		return RET_WRONG_USAGE;
+	}
+        
+	s = get_connection(DYNDNSHOST, PORT, &ptr);
+	if(s == -1) {
+		ret_msg(HERR, "%s: %s", ptr, DYNDNSHOST);
+		ret = RET_WARNING;
+	} else {
+		ret = update_dyndns(s, &args);
+		if(ret == RET_OK) {
+			ret = check_server_msg(s, args.hostname);
+		}
+		(void)close(s);
+	}
+        
+	return ret;
+}
+
+static void
+stolower(char *str, char *buf, size_t size)
+{
+
+	int n;
+        
+	for(n = 0; n < size && str[n] != '\0'; n++) {
+		buf[n] = tolower(str[n]);
+	}
+	buf[n] = '\0';
+
+	return;
+        
+}
+
+static int
+get_flags(struct arguments *args, int argc, char *argv[])
+{
+        
+	int c;
+	char buf[BUFSIZE];
+
+	args->wildcard = "NOCHG";
+
+	for(;;) {
+                
+		int option_index = 0;
+		static struct option long_options[] = {
+			{ "ipv4",		1, 0, '4' },
+			{ "wildcard",		1, 0, 'w' },
+			{ "help",		0, 0, 'h' },
+			{ "version",		0, 0, 'v' },
+			{ NULL,			0, 0, 0   }
+		};
+                
+		c = getopt_long(argc, argv, "4:w:",
+				long_options, &option_index);
+                
+		if(c == -1) break;
+                
+		switch(c) {
+		case '4':
+			args->ipv4 = optarg;
+			break;
+		case 'w':
+			stolower(optarg, buf, BUFSIZE);
+			if(strcmp(buf, "on") == 0) {
+				args->wildcard = "ON";
+			} else if(strcmp(buf, "off") == 0) {
+				args->wildcard = "OFF";
+			} else {
+				ret_msg(NONE, "invalid argument for `-w': %s", optarg);
+				return 1;
+			}
+			break;
+		case 'h':
+			print_usage(argv[ARGV_PNAME], stdout);
+			exit(EXIT_SUCCESS);
+		case 'v':
+			print_version(stdout);
+			exit(EXIT_SUCCESS);
+		}
+	}
+
+	switch(argc-optind) {
+        default:
+		ret_msg(NONE, "wrong usage");
+		return RET_WRONG_USAGE;
+                
+        case 2:
+		args->login = getenv("LOGIN");
+		if(args->login == NULL) {
+			ret_msg(NONE,
+				"environment variable LOGIN is empty");
+			return RET_WRONG_USAGE;
+		}
+		break;
+        case 3:
+		args->login = argv[ARGV_LOGIN];
+	}
+	args->hostname = argv[ARGV_HOSTNAME];
+        
+	return RET_OK;
+        
+}
+
+#define BUFLEN		4096
+#define BUFFREE(name)	BUFLEN - strlen(name)
+
+static int
+update_dyndns(const int s, struct arguments *args)
+{
+
+	char *b64user;
+	char message[BUFLEN];
+        
+	if(strlen(args->login) > 128) {
+		ret_msg(NONE, "username is too long");
+		return RET_ERROR;
+	}
+	b64user = (char *)malloc((2 * strlen(args->login) + 1));
+	if(b64user == NULL) {
+		ret_msg(PERR, "malloc() failed");
+		return RET_WARNING;
+	}
+	(void)memset(b64user, 0, 2 * strlen(args->login) + 1);
+        
+	base64encode(args->login, b64user);
+	(void)snprintf(message, BUFLEN,
+                       "GET /nic/update?hostname=%s&myip=%s&wildcard=%s"
+                       ,args->hostname, args->ipv4, args->wildcard);
+        
+	{
+		char buffer[1024];
+                
+		(void)snprintf(buffer, 1024,
+                               " HTTP/1.1\r\n"
+                               "Host: %s\r\n"
+                               "Authorization: Basic %s\r\n"
+                               "User-Agent: %s %s - %s\r\n"
+                               "Connection: close\r\n"
+                               "Pragma: no-cache\r\n\r\n",
+                               DYNDNSHOST, b64user, PNAME, VERSION, HOMEPAGE);
+		(void)strncat(message, buffer, BUFLEN - 1 - strlen(message));
+	}
+	print_debug("\n\nMessage:"
+		    "\n--------------------------------------\n"
+		    "%s--------------------------------------\n\n",
+                    message);
+	
+	if(write(s, message, strlen(message)) == -1) {
+		ret_msg(PERR, "write() failed");
+		return RET_WARNING;
+	}
+
+	free(b64user);
+	return RET_OK;
+}
+
+static int
+check_server_msg(int s, const char *hostname)
+{
+        
+	int n;
+	char server_msg[BUFSIZE], *ptr;
+	char rtn_msg[BUFSIZE];
+        
+	(void)memset(rtn_msg, 0, sizeof(rtn_msg));
+	/* get server_msg */
+	(void)memset(server_msg, 0, sizeof(server_msg));
+	if(read(s, server_msg, sizeof(server_msg) - 1) < 0) {
+		ret_msg(PERR, "read() failed");
+		return RET_WARNING;
+	}
+
+	print_debug("\n\nServer message:"
+		    "\n--------------------------------------\n"
+		    "%s--------------------------------------\n\n",
+		    server_msg);
+    
+	//FIXME: The following code need to be modified to fit to selfhost ddns server return msg. jingwei_liang 2015/07    
+	if(strstr(server_msg, "HTTP/1.1 200 OK") ||
+	   strstr(server_msg, "HTTP/1.0 200 OK")) {
+                
+		(void)strtok(server_msg, "\n");
+		while((ptr = strtok(NULL, "\n")) != NULL) {
+			for(n=0; return_codes[n].code != NULL; n++) {
+				if(strstr(ptr, return_codes[n].code)) {
+					ret_msg(NONE, "%s: %s",
+						hostname, return_codes[n].message);
+					if(return_codes[n].error == 1) {
+						return RET_ERROR;
+					} else {
+						return RET_OK;
+					}
+				}
+			}
+		}
+	} else if(strstr(server_msg, "401 Authorization Required")) {
+		ret_msg(NONE, "selfhost.de: wrong username or password");
+	} else {
+		sscanf(server_msg, " HTTP/1.%*c %*3d %255[^\r\n]", rtn_msg);
+		ret_msg(NONE, "unknown return code: %s", rtn_msg);
+	}
+        
+	return RET_ERROR;
+}
diff --git a/src/plugins/libselfhost.h b/src/plugins/libselfhost.h
new file mode 100644
index 0000000..1f1695a
--- /dev/null
+++ b/src/plugins/libselfhost.h
@@ -0,0 +1,79 @@
+/* -- updatedd: libselfhost.h --
+ *
+ * Copyright (C) 2002, 2003, 2004, 2005 Philipp Benner
+ *
+ * This file is part of UpdateDD - http://updatedd.philipp-benner.de.
+ *
+ * UpdateDD is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * any later version.
+ *
+ * UpdateDD is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with UpdateDD; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ */
+
+/*
+ * Arcadyan Corp. Jingwei Liang 2015/07
+ * More informations please refer http://www.selfhost.de/
+ * 
+ */
+
+#include <ret_codes.h>
+
+#define DYNDNSHOST	"carol.selfhost.de"
+#define PORT		80
+
+#define BUFSIZE		512
+
+#define ARGV_PNAME	0
+#define ARGV_LOGIN	argc-2
+#define ARGV_HOSTNAME	argc-1
+
+#define COLORED(x)	"\033[0;31;1m"x"\033[0m"
+
+static char ret_msg_buf[BUFSIZE];
+
+struct arguments {
+	const char *hostname;
+	char *ipv4;
+	char *login;
+	const char *wildcard;
+};
+
+static struct dyndns_return_codes {
+	const char *code;
+	const char *message;
+	const int  error;
+} return_codes[] = {
+	{ "good",		"Update good and successful, IP updated.",		0 },
+	{ "nochg",		"No changes, update considered abusive.",		0 },
+	{ "badauth",	"The username or password specified are incorrect",		1 },
+	{ "badagent",	"The user agent that was sent has been blocked for not following specifications,"
+						" or no user agent was specified.",					1 },
+	{ "notfqdn",	"A Fully-Qualified Domain Name was not provided.",		1 },
+	{ "nohost",		"The hostname specified does not exist.",				1 },
+	{ "!yours",		"The hostname specified exists,"
+						" but not under the username specified.",			1 },
+	{ "abuse",		"The hostname specified is blocked for abuse",	  		1 },
+	{ "dnserr",		"DNS error encountered.",								1 },
+	{ "servererr",	"There is a serious problem on server side,"
+						" such as a database or DNS server failure.",		1 },
+	{ NULL,		NULL,							0 }
+};
+
+static int get_flags(struct arguments *args, int argc, char *argv[]);
+static int update_dyndns(const int s, struct arguments *args);
+static int check_server_msg(const int s, const char *hostnames);
+
+char *
+get_retmsg(void)
+{
+	return ret_msg_buf;
+}
